// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "KVDataService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::kv;

class KVDataServiceHandler : virtual public KVDataServiceIf {
 public:
  KVDataServiceHandler() {
    // Your initialization goes here
  }

  int32_t put(const KType& key, const VType& value) {
    // Your implementation goes here
    printf("put\n");
  }

  int32_t multiPut(const KVList& keyval) {
    // Your implementation goes here
    printf("multiPut\n");
  }

  int32_t multiPutM(const KVMap& keysvals) {
    // Your implementation goes here
    printf("multiPutM\n");
  }

  void get(VType& _return, const KType& key) {
    // Your implementation goes here
    printf("get\n");
  }

  void multiGet(KVList& _return, const KList& keys) {
    // Your implementation goes here
    printf("multiGet\n");
  }

  void multiGetM(KVMap& _return, const KList& keys) {
    // Your implementation goes here
    printf("multiGetM\n");
  }

  int32_t remove(const KType& key) {
    // Your implementation goes here
    printf("remove\n");
  }

  int32_t multiRemove(const KList& keys) {
    // Your implementation goes here
    printf("multiRemove\n");
  }

  int32_t add(const KType& key, const VType& value) {
    // Your implementation goes here
    printf("add\n");
  }

  int32_t update(const KType& key, const VType& value) {
    // Your implementation goes here
    printf("update\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::std::shared_ptr<KVDataServiceHandler> handler(new KVDataServiceHandler());
  ::std::shared_ptr<TProcessor> processor(new KVDataServiceProcessor(handler));
  ::std::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::std::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::std::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

