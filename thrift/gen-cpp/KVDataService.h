/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef KVDataService_H
#define KVDataService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "kv_types.h"

namespace kv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class KVDataServiceIf {
 public:
  virtual ~KVDataServiceIf() {}
  virtual int32_t put(const KType& key, const VType& value) = 0;
  virtual int32_t multiPut(const KVList& keyval) = 0;
  virtual int32_t multiPutM(const KVMap& keysvals) = 0;
  virtual void get(VType& _return, const KType& key) = 0;
  virtual void multiGet(KVList& _return, const KList& keys) = 0;
  virtual void multiGetM(KVMap& _return, const KList& keys) = 0;
  virtual int32_t remove(const KType& key) = 0;
  virtual int32_t multiRemove(const KList& keys) = 0;
  virtual int32_t add(const KType& key, const VType& value) = 0;
  virtual int32_t update(const KType& key, const VType& value) = 0;
};

class KVDataServiceIfFactory {
 public:
  typedef KVDataServiceIf Handler;

  virtual ~KVDataServiceIfFactory() {}

  virtual KVDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(KVDataServiceIf* /* handler */) = 0;
};

class KVDataServiceIfSingletonFactory : virtual public KVDataServiceIfFactory {
 public:
  KVDataServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<KVDataServiceIf>& iface) : iface_(iface) {}
  virtual ~KVDataServiceIfSingletonFactory() {}

  virtual KVDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(KVDataServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> iface_;
};

class KVDataServiceNull : virtual public KVDataServiceIf {
 public:
  virtual ~KVDataServiceNull() {}
  int32_t put(const KType& /* key */, const VType& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t multiPut(const KVList& /* keyval */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t multiPutM(const KVMap& /* keysvals */) {
    int32_t _return = 0;
    return _return;
  }
  void get(VType& /* _return */, const KType& /* key */) {
    return;
  }
  void multiGet(KVList& /* _return */, const KList& /* keys */) {
    return;
  }
  void multiGetM(KVMap& /* _return */, const KList& /* keys */) {
    return;
  }
  int32_t remove(const KType& /* key */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t multiRemove(const KList& /* keys */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t add(const KType& /* key */, const VType& /* value */) {
    int32_t _return = 0;
    return _return;
  }
  int32_t update(const KType& /* key */, const VType& /* value */) {
    int32_t _return = 0;
    return _return;
  }
};

typedef struct _KVDataService_put_args__isset {
  _KVDataService_put_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _KVDataService_put_args__isset;

class KVDataService_put_args {
 public:

  KVDataService_put_args(const KVDataService_put_args&);
  KVDataService_put_args& operator=(const KVDataService_put_args&);
  KVDataService_put_args() : key(), value() {
  }

  virtual ~KVDataService_put_args() throw();
  KType key;
  VType value;

  _KVDataService_put_args__isset __isset;

  void __set_key(const KType& val);

  void __set_value(const VType& val);

  bool operator == (const KVDataService_put_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const KVDataService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_put_pargs {
 public:


  virtual ~KVDataService_put_pargs() throw();
  const KType* key;
  const VType* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_put_result__isset {
  _KVDataService_put_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_put_result__isset;

class KVDataService_put_result {
 public:

  KVDataService_put_result(const KVDataService_put_result&);
  KVDataService_put_result& operator=(const KVDataService_put_result&);
  KVDataService_put_result() : success(0) {
  }

  virtual ~KVDataService_put_result() throw();
  int32_t success;

  _KVDataService_put_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_put_presult__isset {
  _KVDataService_put_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_put_presult__isset;

class KVDataService_put_presult {
 public:


  virtual ~KVDataService_put_presult() throw();
  int32_t* success;

  _KVDataService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_multiPut_args__isset {
  _KVDataService_multiPut_args__isset() : keyval(false) {}
  bool keyval :1;
} _KVDataService_multiPut_args__isset;

class KVDataService_multiPut_args {
 public:

  KVDataService_multiPut_args(const KVDataService_multiPut_args&);
  KVDataService_multiPut_args& operator=(const KVDataService_multiPut_args&);
  KVDataService_multiPut_args() {
  }

  virtual ~KVDataService_multiPut_args() throw();
  KVList keyval;

  _KVDataService_multiPut_args__isset __isset;

  void __set_keyval(const KVList& val);

  bool operator == (const KVDataService_multiPut_args & rhs) const
  {
    if (!(keyval == rhs.keyval))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_multiPut_pargs {
 public:


  virtual ~KVDataService_multiPut_pargs() throw();
  const KVList* keyval;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiPut_result__isset {
  _KVDataService_multiPut_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiPut_result__isset;

class KVDataService_multiPut_result {
 public:

  KVDataService_multiPut_result(const KVDataService_multiPut_result&);
  KVDataService_multiPut_result& operator=(const KVDataService_multiPut_result&);
  KVDataService_multiPut_result() : success(0) {
  }

  virtual ~KVDataService_multiPut_result() throw();
  int32_t success;

  _KVDataService_multiPut_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_multiPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiPut_presult__isset {
  _KVDataService_multiPut_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiPut_presult__isset;

class KVDataService_multiPut_presult {
 public:


  virtual ~KVDataService_multiPut_presult() throw();
  int32_t* success;

  _KVDataService_multiPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_multiPutM_args__isset {
  _KVDataService_multiPutM_args__isset() : keysvals(false) {}
  bool keysvals :1;
} _KVDataService_multiPutM_args__isset;

class KVDataService_multiPutM_args {
 public:

  KVDataService_multiPutM_args(const KVDataService_multiPutM_args&);
  KVDataService_multiPutM_args& operator=(const KVDataService_multiPutM_args&);
  KVDataService_multiPutM_args() {
  }

  virtual ~KVDataService_multiPutM_args() throw();
  KVMap keysvals;

  _KVDataService_multiPutM_args__isset __isset;

  void __set_keysvals(const KVMap& val);

  bool operator == (const KVDataService_multiPutM_args & rhs) const
  {
    if (!(keysvals == rhs.keysvals))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiPutM_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiPutM_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_multiPutM_pargs {
 public:


  virtual ~KVDataService_multiPutM_pargs() throw();
  const KVMap* keysvals;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiPutM_result__isset {
  _KVDataService_multiPutM_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiPutM_result__isset;

class KVDataService_multiPutM_result {
 public:

  KVDataService_multiPutM_result(const KVDataService_multiPutM_result&);
  KVDataService_multiPutM_result& operator=(const KVDataService_multiPutM_result&);
  KVDataService_multiPutM_result() : success(0) {
  }

  virtual ~KVDataService_multiPutM_result() throw();
  int32_t success;

  _KVDataService_multiPutM_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_multiPutM_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiPutM_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiPutM_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiPutM_presult__isset {
  _KVDataService_multiPutM_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiPutM_presult__isset;

class KVDataService_multiPutM_presult {
 public:


  virtual ~KVDataService_multiPutM_presult() throw();
  int32_t* success;

  _KVDataService_multiPutM_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_get_args__isset {
  _KVDataService_get_args__isset() : key(false) {}
  bool key :1;
} _KVDataService_get_args__isset;

class KVDataService_get_args {
 public:

  KVDataService_get_args(const KVDataService_get_args&);
  KVDataService_get_args& operator=(const KVDataService_get_args&);
  KVDataService_get_args() : key() {
  }

  virtual ~KVDataService_get_args() throw();
  KType key;

  _KVDataService_get_args__isset __isset;

  void __set_key(const KType& val);

  bool operator == (const KVDataService_get_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const KVDataService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_get_pargs {
 public:


  virtual ~KVDataService_get_pargs() throw();
  const KType* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_get_result__isset {
  _KVDataService_get_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_get_result__isset;

class KVDataService_get_result {
 public:

  KVDataService_get_result(const KVDataService_get_result&);
  KVDataService_get_result& operator=(const KVDataService_get_result&);
  KVDataService_get_result() : success() {
  }

  virtual ~KVDataService_get_result() throw();
  VType success;

  _KVDataService_get_result__isset __isset;

  void __set_success(const VType& val);

  bool operator == (const KVDataService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_get_presult__isset {
  _KVDataService_get_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_get_presult__isset;

class KVDataService_get_presult {
 public:


  virtual ~KVDataService_get_presult() throw();
  VType* success;

  _KVDataService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_multiGet_args__isset {
  _KVDataService_multiGet_args__isset() : keys(false) {}
  bool keys :1;
} _KVDataService_multiGet_args__isset;

class KVDataService_multiGet_args {
 public:

  KVDataService_multiGet_args(const KVDataService_multiGet_args&);
  KVDataService_multiGet_args& operator=(const KVDataService_multiGet_args&);
  KVDataService_multiGet_args() {
  }

  virtual ~KVDataService_multiGet_args() throw();
  KList keys;

  _KVDataService_multiGet_args__isset __isset;

  void __set_keys(const KList& val);

  bool operator == (const KVDataService_multiGet_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiGet_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiGet_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_multiGet_pargs {
 public:


  virtual ~KVDataService_multiGet_pargs() throw();
  const KList* keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiGet_result__isset {
  _KVDataService_multiGet_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiGet_result__isset;

class KVDataService_multiGet_result {
 public:

  KVDataService_multiGet_result(const KVDataService_multiGet_result&);
  KVDataService_multiGet_result& operator=(const KVDataService_multiGet_result&);
  KVDataService_multiGet_result() {
  }

  virtual ~KVDataService_multiGet_result() throw();
  KVList success;

  _KVDataService_multiGet_result__isset __isset;

  void __set_success(const KVList& val);

  bool operator == (const KVDataService_multiGet_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiGet_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiGet_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiGet_presult__isset {
  _KVDataService_multiGet_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiGet_presult__isset;

class KVDataService_multiGet_presult {
 public:


  virtual ~KVDataService_multiGet_presult() throw();
  KVList* success;

  _KVDataService_multiGet_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_multiGetM_args__isset {
  _KVDataService_multiGetM_args__isset() : keys(false) {}
  bool keys :1;
} _KVDataService_multiGetM_args__isset;

class KVDataService_multiGetM_args {
 public:

  KVDataService_multiGetM_args(const KVDataService_multiGetM_args&);
  KVDataService_multiGetM_args& operator=(const KVDataService_multiGetM_args&);
  KVDataService_multiGetM_args() {
  }

  virtual ~KVDataService_multiGetM_args() throw();
  KList keys;

  _KVDataService_multiGetM_args__isset __isset;

  void __set_keys(const KList& val);

  bool operator == (const KVDataService_multiGetM_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiGetM_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiGetM_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_multiGetM_pargs {
 public:


  virtual ~KVDataService_multiGetM_pargs() throw();
  const KList* keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiGetM_result__isset {
  _KVDataService_multiGetM_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiGetM_result__isset;

class KVDataService_multiGetM_result {
 public:

  KVDataService_multiGetM_result(const KVDataService_multiGetM_result&);
  KVDataService_multiGetM_result& operator=(const KVDataService_multiGetM_result&);
  KVDataService_multiGetM_result() {
  }

  virtual ~KVDataService_multiGetM_result() throw();
  KVMap success;

  _KVDataService_multiGetM_result__isset __isset;

  void __set_success(const KVMap& val);

  bool operator == (const KVDataService_multiGetM_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiGetM_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiGetM_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiGetM_presult__isset {
  _KVDataService_multiGetM_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiGetM_presult__isset;

class KVDataService_multiGetM_presult {
 public:


  virtual ~KVDataService_multiGetM_presult() throw();
  KVMap* success;

  _KVDataService_multiGetM_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_remove_args__isset {
  _KVDataService_remove_args__isset() : key(false) {}
  bool key :1;
} _KVDataService_remove_args__isset;

class KVDataService_remove_args {
 public:

  KVDataService_remove_args(const KVDataService_remove_args&);
  KVDataService_remove_args& operator=(const KVDataService_remove_args&);
  KVDataService_remove_args() : key() {
  }

  virtual ~KVDataService_remove_args() throw();
  KType key;

  _KVDataService_remove_args__isset __isset;

  void __set_key(const KType& val);

  bool operator == (const KVDataService_remove_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const KVDataService_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_remove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_remove_pargs {
 public:


  virtual ~KVDataService_remove_pargs() throw();
  const KType* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_remove_result__isset {
  _KVDataService_remove_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_remove_result__isset;

class KVDataService_remove_result {
 public:

  KVDataService_remove_result(const KVDataService_remove_result&);
  KVDataService_remove_result& operator=(const KVDataService_remove_result&);
  KVDataService_remove_result() : success(0) {
  }

  virtual ~KVDataService_remove_result() throw();
  int32_t success;

  _KVDataService_remove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_remove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_remove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_remove_presult__isset {
  _KVDataService_remove_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_remove_presult__isset;

class KVDataService_remove_presult {
 public:


  virtual ~KVDataService_remove_presult() throw();
  int32_t* success;

  _KVDataService_remove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_multiRemove_args__isset {
  _KVDataService_multiRemove_args__isset() : keys(false) {}
  bool keys :1;
} _KVDataService_multiRemove_args__isset;

class KVDataService_multiRemove_args {
 public:

  KVDataService_multiRemove_args(const KVDataService_multiRemove_args&);
  KVDataService_multiRemove_args& operator=(const KVDataService_multiRemove_args&);
  KVDataService_multiRemove_args() {
  }

  virtual ~KVDataService_multiRemove_args() throw();
  KList keys;

  _KVDataService_multiRemove_args__isset __isset;

  void __set_keys(const KList& val);

  bool operator == (const KVDataService_multiRemove_args & rhs) const
  {
    if (!(keys == rhs.keys))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiRemove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiRemove_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_multiRemove_pargs {
 public:


  virtual ~KVDataService_multiRemove_pargs() throw();
  const KList* keys;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiRemove_result__isset {
  _KVDataService_multiRemove_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiRemove_result__isset;

class KVDataService_multiRemove_result {
 public:

  KVDataService_multiRemove_result(const KVDataService_multiRemove_result&);
  KVDataService_multiRemove_result& operator=(const KVDataService_multiRemove_result&);
  KVDataService_multiRemove_result() : success(0) {
  }

  virtual ~KVDataService_multiRemove_result() throw();
  int32_t success;

  _KVDataService_multiRemove_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_multiRemove_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_multiRemove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_multiRemove_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_multiRemove_presult__isset {
  _KVDataService_multiRemove_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_multiRemove_presult__isset;

class KVDataService_multiRemove_presult {
 public:


  virtual ~KVDataService_multiRemove_presult() throw();
  int32_t* success;

  _KVDataService_multiRemove_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_add_args__isset {
  _KVDataService_add_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _KVDataService_add_args__isset;

class KVDataService_add_args {
 public:

  KVDataService_add_args(const KVDataService_add_args&);
  KVDataService_add_args& operator=(const KVDataService_add_args&);
  KVDataService_add_args() : key(), value() {
  }

  virtual ~KVDataService_add_args() throw();
  KType key;
  VType value;

  _KVDataService_add_args__isset __isset;

  void __set_key(const KType& val);

  void __set_value(const VType& val);

  bool operator == (const KVDataService_add_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const KVDataService_add_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_add_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_add_pargs {
 public:


  virtual ~KVDataService_add_pargs() throw();
  const KType* key;
  const VType* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_add_result__isset {
  _KVDataService_add_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_add_result__isset;

class KVDataService_add_result {
 public:

  KVDataService_add_result(const KVDataService_add_result&);
  KVDataService_add_result& operator=(const KVDataService_add_result&);
  KVDataService_add_result() : success(0) {
  }

  virtual ~KVDataService_add_result() throw();
  int32_t success;

  _KVDataService_add_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_add_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_add_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_add_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_add_presult__isset {
  _KVDataService_add_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_add_presult__isset;

class KVDataService_add_presult {
 public:


  virtual ~KVDataService_add_presult() throw();
  int32_t* success;

  _KVDataService_add_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _KVDataService_update_args__isset {
  _KVDataService_update_args__isset() : key(false), value(false) {}
  bool key :1;
  bool value :1;
} _KVDataService_update_args__isset;

class KVDataService_update_args {
 public:

  KVDataService_update_args(const KVDataService_update_args&);
  KVDataService_update_args& operator=(const KVDataService_update_args&);
  KVDataService_update_args() : key(), value() {
  }

  virtual ~KVDataService_update_args() throw();
  KType key;
  VType value;

  _KVDataService_update_args__isset __isset;

  void __set_key(const KType& val);

  void __set_value(const VType& val);

  bool operator == (const KVDataService_update_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const KVDataService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class KVDataService_update_pargs {
 public:


  virtual ~KVDataService_update_pargs() throw();
  const KType* key;
  const VType* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_update_result__isset {
  _KVDataService_update_result__isset() : success(false) {}
  bool success :1;
} _KVDataService_update_result__isset;

class KVDataService_update_result {
 public:

  KVDataService_update_result(const KVDataService_update_result&);
  KVDataService_update_result& operator=(const KVDataService_update_result&);
  KVDataService_update_result() : success(0) {
  }

  virtual ~KVDataService_update_result() throw();
  int32_t success;

  _KVDataService_update_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const KVDataService_update_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const KVDataService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVDataService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _KVDataService_update_presult__isset {
  _KVDataService_update_presult__isset() : success(false) {}
  bool success :1;
} _KVDataService_update_presult__isset;

class KVDataService_update_presult {
 public:


  virtual ~KVDataService_update_presult() throw();
  int32_t* success;

  _KVDataService_update_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class KVDataServiceClient : virtual public KVDataServiceIf {
 public:
  KVDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  KVDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t put(const KType& key, const VType& value);
  void send_put(const KType& key, const VType& value);
  int32_t recv_put();
  int32_t multiPut(const KVList& keyval);
  void send_multiPut(const KVList& keyval);
  int32_t recv_multiPut();
  int32_t multiPutM(const KVMap& keysvals);
  void send_multiPutM(const KVMap& keysvals);
  int32_t recv_multiPutM();
  void get(VType& _return, const KType& key);
  void send_get(const KType& key);
  void recv_get(VType& _return);
  void multiGet(KVList& _return, const KList& keys);
  void send_multiGet(const KList& keys);
  void recv_multiGet(KVList& _return);
  void multiGetM(KVMap& _return, const KList& keys);
  void send_multiGetM(const KList& keys);
  void recv_multiGetM(KVMap& _return);
  int32_t remove(const KType& key);
  void send_remove(const KType& key);
  int32_t recv_remove();
  int32_t multiRemove(const KList& keys);
  void send_multiRemove(const KList& keys);
  int32_t recv_multiRemove();
  int32_t add(const KType& key, const VType& value);
  void send_add(const KType& key, const VType& value);
  int32_t recv_add();
  int32_t update(const KType& key, const VType& value);
  void send_update(const KType& key, const VType& value);
  int32_t recv_update();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class KVDataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (KVDataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiPutM(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiGet(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiGetM(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiRemove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  KVDataServiceProcessor(::apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &KVDataServiceProcessor::process_put;
    processMap_["multiPut"] = &KVDataServiceProcessor::process_multiPut;
    processMap_["multiPutM"] = &KVDataServiceProcessor::process_multiPutM;
    processMap_["get"] = &KVDataServiceProcessor::process_get;
    processMap_["multiGet"] = &KVDataServiceProcessor::process_multiGet;
    processMap_["multiGetM"] = &KVDataServiceProcessor::process_multiGetM;
    processMap_["remove"] = &KVDataServiceProcessor::process_remove;
    processMap_["multiRemove"] = &KVDataServiceProcessor::process_multiRemove;
    processMap_["add"] = &KVDataServiceProcessor::process_add;
    processMap_["update"] = &KVDataServiceProcessor::process_update;
  }

  virtual ~KVDataServiceProcessor() {}
};

class KVDataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  KVDataServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< KVDataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< KVDataServiceIfFactory > handlerFactory_;
};

class KVDataServiceMultiface : virtual public KVDataServiceIf {
 public:
  KVDataServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~KVDataServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> > ifaces_;
  KVDataServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<KVDataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int32_t put(const KType& key, const VType& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(key, value);
    }
    return ifaces_[i]->put(key, value);
  }

  int32_t multiPut(const KVList& keyval) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiPut(keyval);
    }
    return ifaces_[i]->multiPut(keyval);
  }

  int32_t multiPutM(const KVMap& keysvals) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiPutM(keysvals);
    }
    return ifaces_[i]->multiPutM(keysvals);
  }

  void get(VType& _return, const KType& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, key);
    }
    ifaces_[i]->get(_return, key);
    return;
  }

  void multiGet(KVList& _return, const KList& keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiGet(_return, keys);
    }
    ifaces_[i]->multiGet(_return, keys);
    return;
  }

  void multiGetM(KVMap& _return, const KList& keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiGetM(_return, keys);
    }
    ifaces_[i]->multiGetM(_return, keys);
    return;
  }

  int32_t remove(const KType& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(key);
    }
    return ifaces_[i]->remove(key);
  }

  int32_t multiRemove(const KList& keys) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiRemove(keys);
    }
    return ifaces_[i]->multiRemove(keys);
  }

  int32_t add(const KType& key, const VType& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add(key, value);
    }
    return ifaces_[i]->add(key, value);
  }

  int32_t update(const KType& key, const VType& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(key, value);
    }
    return ifaces_[i]->update(key, value);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class KVDataServiceConcurrentClient : virtual public KVDataServiceIf {
 public:
  KVDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  KVDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int32_t put(const KType& key, const VType& value);
  int32_t send_put(const KType& key, const VType& value);
  int32_t recv_put(const int32_t seqid);
  int32_t multiPut(const KVList& keyval);
  int32_t send_multiPut(const KVList& keyval);
  int32_t recv_multiPut(const int32_t seqid);
  int32_t multiPutM(const KVMap& keysvals);
  int32_t send_multiPutM(const KVMap& keysvals);
  int32_t recv_multiPutM(const int32_t seqid);
  void get(VType& _return, const KType& key);
  int32_t send_get(const KType& key);
  void recv_get(VType& _return, const int32_t seqid);
  void multiGet(KVList& _return, const KList& keys);
  int32_t send_multiGet(const KList& keys);
  void recv_multiGet(KVList& _return, const int32_t seqid);
  void multiGetM(KVMap& _return, const KList& keys);
  int32_t send_multiGetM(const KList& keys);
  void recv_multiGetM(KVMap& _return, const int32_t seqid);
  int32_t remove(const KType& key);
  int32_t send_remove(const KType& key);
  int32_t recv_remove(const int32_t seqid);
  int32_t multiRemove(const KList& keys);
  int32_t send_multiRemove(const KList& keys);
  int32_t recv_multiRemove(const int32_t seqid);
  int32_t add(const KType& key, const VType& value);
  int32_t send_add(const KType& key, const VType& value);
  int32_t recv_add(const int32_t seqid);
  int32_t update(const KType& key, const VType& value);
  int32_t send_update(const KType& key, const VType& value);
  int32_t recv_update(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
