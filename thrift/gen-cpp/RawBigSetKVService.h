/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RawBigSetKVService_H
#define RawBigSetKVService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "bskv_types.h"

namespace bskv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RawBigSetKVServiceIf {
 public:
  virtual ~RawBigSetKVServiceIf() {}
  virtual void bsgPutItem(TPutItemResult& _return, const TContainerKey rootID, const TItem& item) = 0;
  virtual bool bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey) = 0;
  virtual void bsgExisted(TExistedResult& _return, const TContainerKey rootID, const TItemKey& itemKey) = 0;
  virtual void bsgGetItem(TItemResult& _return, const TContainerKey rootID, const TItemKey& itemKey) = 0;
  virtual void bsgGetSlice(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) = 0;
  virtual void bsgGetSliceFromItem(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void bsgGetSliceR(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) = 0;
  virtual void bsgGetSliceFromItemR(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void bsgRangeQuery(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey) = 0;
  virtual void bsgMultiPut(TMultiPutItemResult& _return, const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) = 0;
  virtual int64_t getTotalCount(const TContainerKey rootID) = 0;
  virtual int64_t removeAll(const TContainerKey rootID) = 0;
};

class RawBigSetKVServiceIfFactory {
 public:
  typedef RawBigSetKVServiceIf Handler;

  virtual ~RawBigSetKVServiceIfFactory() {}

  virtual RawBigSetKVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RawBigSetKVServiceIf* /* handler */) = 0;
  };

class RawBigSetKVServiceIfSingletonFactory : virtual public RawBigSetKVServiceIfFactory {
 public:
  RawBigSetKVServiceIfSingletonFactory(const ::std::shared_ptr<RawBigSetKVServiceIf>& iface) : iface_(iface) {}
  virtual ~RawBigSetKVServiceIfSingletonFactory() {}

  virtual RawBigSetKVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(RawBigSetKVServiceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<RawBigSetKVServiceIf> iface_;
};

class RawBigSetKVServiceNull : virtual public RawBigSetKVServiceIf {
 public:
  virtual ~RawBigSetKVServiceNull() {}
  void bsgPutItem(TPutItemResult& /* _return */, const TContainerKey /* rootID */, const TItem& /* item */) override {
    return;
  }
  bool bsgRemoveItem(const TMetaKey /* key */, const TItemKey& /* itemKey */) override {
    bool _return = false;
    return _return;
  }
  void bsgExisted(TExistedResult& /* _return */, const TContainerKey /* rootID */, const TItemKey& /* itemKey */) override {
    return;
  }
  void bsgGetItem(TItemResult& /* _return */, const TContainerKey /* rootID */, const TItemKey& /* itemKey */) override {
    return;
  }
  void bsgGetSlice(TItemSetResult& /* _return */, const TContainerKey /* rootID */, const int32_t /* fromIdx */, const int32_t /* count */) override {
    return;
  }
  void bsgGetSliceFromItem(TItemSetResult& /* _return */, const TContainerKey /* rootID */, const TItemKey& /* fromKey */, const int32_t /* count */) override {
    return;
  }
  void bsgGetSliceR(TItemSetResult& /* _return */, const TContainerKey /* rootID */, const int32_t /* fromIdx */, const int32_t /* count */) override {
    return;
  }
  void bsgGetSliceFromItemR(TItemSetResult& /* _return */, const TContainerKey /* rootID */, const TItemKey& /* fromKey */, const int32_t /* count */) override {
    return;
  }
  void bsgRangeQuery(TItemSetResult& /* _return */, const TContainerKey /* rootID */, const TItemKey& /* startKey */, const TItemKey& /* endKey */) override {
    return;
  }
  void bsgMultiPut(TMultiPutItemResult& /* _return */, const TContainerKey /* rootID */, const TItemSet& /* setData */, const bool /* getAddedItems */, const bool /* getReplacedItems */) override {
    return;
  }
  int64_t getTotalCount(const TContainerKey /* rootID */) override {
    int64_t _return = 0;
    return _return;
  }
  int64_t removeAll(const TContainerKey /* rootID */) override {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _RawBigSetKVService_bsgPutItem_args__isset {
  _RawBigSetKVService_bsgPutItem_args__isset() : rootID(false), item(false) {}
  bool rootID :1;
  bool item :1;
} _RawBigSetKVService_bsgPutItem_args__isset;

class RawBigSetKVService_bsgPutItem_args {
 public:

  RawBigSetKVService_bsgPutItem_args(const RawBigSetKVService_bsgPutItem_args&);
  RawBigSetKVService_bsgPutItem_args& operator=(const RawBigSetKVService_bsgPutItem_args&);
  RawBigSetKVService_bsgPutItem_args() noexcept
                                     : rootID(0) {
  }

  virtual ~RawBigSetKVService_bsgPutItem_args() noexcept;
  TContainerKey rootID;
  TItem item;

  _RawBigSetKVService_bsgPutItem_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_item(const TItem& val);

  bool operator == (const RawBigSetKVService_bsgPutItem_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgPutItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgPutItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgPutItem_pargs {
 public:


  virtual ~RawBigSetKVService_bsgPutItem_pargs() noexcept;
  const TContainerKey* rootID;
  const TItem* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgPutItem_result__isset {
  _RawBigSetKVService_bsgPutItem_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgPutItem_result__isset;

class RawBigSetKVService_bsgPutItem_result {
 public:

  RawBigSetKVService_bsgPutItem_result(const RawBigSetKVService_bsgPutItem_result&);
  RawBigSetKVService_bsgPutItem_result& operator=(const RawBigSetKVService_bsgPutItem_result&);
  RawBigSetKVService_bsgPutItem_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgPutItem_result() noexcept;
  TPutItemResult success;

  _RawBigSetKVService_bsgPutItem_result__isset __isset;

  void __set_success(const TPutItemResult& val);

  bool operator == (const RawBigSetKVService_bsgPutItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgPutItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgPutItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgPutItem_presult__isset {
  _RawBigSetKVService_bsgPutItem_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgPutItem_presult__isset;

class RawBigSetKVService_bsgPutItem_presult {
 public:


  virtual ~RawBigSetKVService_bsgPutItem_presult() noexcept;
  TPutItemResult* success;

  _RawBigSetKVService_bsgPutItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgRemoveItem_args__isset {
  _RawBigSetKVService_bsgRemoveItem_args__isset() : key(false), itemKey(false) {}
  bool key :1;
  bool itemKey :1;
} _RawBigSetKVService_bsgRemoveItem_args__isset;

class RawBigSetKVService_bsgRemoveItem_args {
 public:

  RawBigSetKVService_bsgRemoveItem_args(const RawBigSetKVService_bsgRemoveItem_args&);
  RawBigSetKVService_bsgRemoveItem_args& operator=(const RawBigSetKVService_bsgRemoveItem_args&);
  RawBigSetKVService_bsgRemoveItem_args() noexcept
                                        : key(0),
                                          itemKey() {
  }

  virtual ~RawBigSetKVService_bsgRemoveItem_args() noexcept;
  TMetaKey key;
  TItemKey itemKey;

  _RawBigSetKVService_bsgRemoveItem_args__isset __isset;

  void __set_key(const TMetaKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const RawBigSetKVService_bsgRemoveItem_args & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgRemoveItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgRemoveItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgRemoveItem_pargs {
 public:


  virtual ~RawBigSetKVService_bsgRemoveItem_pargs() noexcept;
  const TMetaKey* key;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgRemoveItem_result__isset {
  _RawBigSetKVService_bsgRemoveItem_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgRemoveItem_result__isset;

class RawBigSetKVService_bsgRemoveItem_result {
 public:

  RawBigSetKVService_bsgRemoveItem_result(const RawBigSetKVService_bsgRemoveItem_result&) noexcept;
  RawBigSetKVService_bsgRemoveItem_result& operator=(const RawBigSetKVService_bsgRemoveItem_result&) noexcept;
  RawBigSetKVService_bsgRemoveItem_result() noexcept
                                          : success(0) {
  }

  virtual ~RawBigSetKVService_bsgRemoveItem_result() noexcept;
  bool success;

  _RawBigSetKVService_bsgRemoveItem_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RawBigSetKVService_bsgRemoveItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgRemoveItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgRemoveItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgRemoveItem_presult__isset {
  _RawBigSetKVService_bsgRemoveItem_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgRemoveItem_presult__isset;

class RawBigSetKVService_bsgRemoveItem_presult {
 public:


  virtual ~RawBigSetKVService_bsgRemoveItem_presult() noexcept;
  bool* success;

  _RawBigSetKVService_bsgRemoveItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgExisted_args__isset {
  _RawBigSetKVService_bsgExisted_args__isset() : rootID(false), itemKey(false) {}
  bool rootID :1;
  bool itemKey :1;
} _RawBigSetKVService_bsgExisted_args__isset;

class RawBigSetKVService_bsgExisted_args {
 public:

  RawBigSetKVService_bsgExisted_args(const RawBigSetKVService_bsgExisted_args&);
  RawBigSetKVService_bsgExisted_args& operator=(const RawBigSetKVService_bsgExisted_args&);
  RawBigSetKVService_bsgExisted_args() noexcept
                                     : rootID(0),
                                       itemKey() {
  }

  virtual ~RawBigSetKVService_bsgExisted_args() noexcept;
  TContainerKey rootID;
  TItemKey itemKey;

  _RawBigSetKVService_bsgExisted_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const RawBigSetKVService_bsgExisted_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgExisted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgExisted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgExisted_pargs {
 public:


  virtual ~RawBigSetKVService_bsgExisted_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgExisted_result__isset {
  _RawBigSetKVService_bsgExisted_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgExisted_result__isset;

class RawBigSetKVService_bsgExisted_result {
 public:

  RawBigSetKVService_bsgExisted_result(const RawBigSetKVService_bsgExisted_result&) noexcept;
  RawBigSetKVService_bsgExisted_result& operator=(const RawBigSetKVService_bsgExisted_result&) noexcept;
  RawBigSetKVService_bsgExisted_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgExisted_result() noexcept;
  TExistedResult success;

  _RawBigSetKVService_bsgExisted_result__isset __isset;

  void __set_success(const TExistedResult& val);

  bool operator == (const RawBigSetKVService_bsgExisted_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgExisted_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgExisted_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgExisted_presult__isset {
  _RawBigSetKVService_bsgExisted_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgExisted_presult__isset;

class RawBigSetKVService_bsgExisted_presult {
 public:


  virtual ~RawBigSetKVService_bsgExisted_presult() noexcept;
  TExistedResult* success;

  _RawBigSetKVService_bsgExisted_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgGetItem_args__isset {
  _RawBigSetKVService_bsgGetItem_args__isset() : rootID(false), itemKey(false) {}
  bool rootID :1;
  bool itemKey :1;
} _RawBigSetKVService_bsgGetItem_args__isset;

class RawBigSetKVService_bsgGetItem_args {
 public:

  RawBigSetKVService_bsgGetItem_args(const RawBigSetKVService_bsgGetItem_args&);
  RawBigSetKVService_bsgGetItem_args& operator=(const RawBigSetKVService_bsgGetItem_args&);
  RawBigSetKVService_bsgGetItem_args() noexcept
                                     : rootID(0),
                                       itemKey() {
  }

  virtual ~RawBigSetKVService_bsgGetItem_args() noexcept;
  TContainerKey rootID;
  TItemKey itemKey;

  _RawBigSetKVService_bsgGetItem_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const RawBigSetKVService_bsgGetItem_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgGetItem_pargs {
 public:


  virtual ~RawBigSetKVService_bsgGetItem_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetItem_result__isset {
  _RawBigSetKVService_bsgGetItem_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetItem_result__isset;

class RawBigSetKVService_bsgGetItem_result {
 public:

  RawBigSetKVService_bsgGetItem_result(const RawBigSetKVService_bsgGetItem_result&);
  RawBigSetKVService_bsgGetItem_result& operator=(const RawBigSetKVService_bsgGetItem_result&);
  RawBigSetKVService_bsgGetItem_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgGetItem_result() noexcept;
  TItemResult success;

  _RawBigSetKVService_bsgGetItem_result__isset __isset;

  void __set_success(const TItemResult& val);

  bool operator == (const RawBigSetKVService_bsgGetItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetItem_presult__isset {
  _RawBigSetKVService_bsgGetItem_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetItem_presult__isset;

class RawBigSetKVService_bsgGetItem_presult {
 public:


  virtual ~RawBigSetKVService_bsgGetItem_presult() noexcept;
  TItemResult* success;

  _RawBigSetKVService_bsgGetItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgGetSlice_args__isset {
  _RawBigSetKVService_bsgGetSlice_args__isset() : rootID(false), fromIdx(false), count(false) {}
  bool rootID :1;
  bool fromIdx :1;
  bool count :1;
} _RawBigSetKVService_bsgGetSlice_args__isset;

class RawBigSetKVService_bsgGetSlice_args {
 public:

  RawBigSetKVService_bsgGetSlice_args(const RawBigSetKVService_bsgGetSlice_args&) noexcept;
  RawBigSetKVService_bsgGetSlice_args& operator=(const RawBigSetKVService_bsgGetSlice_args&) noexcept;
  RawBigSetKVService_bsgGetSlice_args() noexcept
                                      : rootID(0),
                                        fromIdx(0),
                                        count(0) {
  }

  virtual ~RawBigSetKVService_bsgGetSlice_args() noexcept;
  TContainerKey rootID;
  int32_t fromIdx;
  int32_t count;

  _RawBigSetKVService_bsgGetSlice_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_fromIdx(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const RawBigSetKVService_bsgGetSlice_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(fromIdx == rhs.fromIdx))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSlice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSlice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgGetSlice_pargs {
 public:


  virtual ~RawBigSetKVService_bsgGetSlice_pargs() noexcept;
  const TContainerKey* rootID;
  const int32_t* fromIdx;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSlice_result__isset {
  _RawBigSetKVService_bsgGetSlice_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSlice_result__isset;

class RawBigSetKVService_bsgGetSlice_result {
 public:

  RawBigSetKVService_bsgGetSlice_result(const RawBigSetKVService_bsgGetSlice_result&);
  RawBigSetKVService_bsgGetSlice_result& operator=(const RawBigSetKVService_bsgGetSlice_result&);
  RawBigSetKVService_bsgGetSlice_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgGetSlice_result() noexcept;
  TItemSetResult success;

  _RawBigSetKVService_bsgGetSlice_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const RawBigSetKVService_bsgGetSlice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSlice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSlice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSlice_presult__isset {
  _RawBigSetKVService_bsgGetSlice_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSlice_presult__isset;

class RawBigSetKVService_bsgGetSlice_presult {
 public:


  virtual ~RawBigSetKVService_bsgGetSlice_presult() noexcept;
  TItemSetResult* success;

  _RawBigSetKVService_bsgGetSlice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItem_args__isset {
  _RawBigSetKVService_bsgGetSliceFromItem_args__isset() : rootID(false), fromKey(false), count(false) {}
  bool rootID :1;
  bool fromKey :1;
  bool count :1;
} _RawBigSetKVService_bsgGetSliceFromItem_args__isset;

class RawBigSetKVService_bsgGetSliceFromItem_args {
 public:

  RawBigSetKVService_bsgGetSliceFromItem_args(const RawBigSetKVService_bsgGetSliceFromItem_args&);
  RawBigSetKVService_bsgGetSliceFromItem_args& operator=(const RawBigSetKVService_bsgGetSliceFromItem_args&);
  RawBigSetKVService_bsgGetSliceFromItem_args() noexcept
                                              : rootID(0),
                                                fromKey(),
                                                count(0) {
  }

  virtual ~RawBigSetKVService_bsgGetSliceFromItem_args() noexcept;
  TContainerKey rootID;
  TItemKey fromKey;
  int32_t count;

  _RawBigSetKVService_bsgGetSliceFromItem_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const RawBigSetKVService_bsgGetSliceFromItem_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceFromItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceFromItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgGetSliceFromItem_pargs {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceFromItem_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItem_result__isset {
  _RawBigSetKVService_bsgGetSliceFromItem_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceFromItem_result__isset;

class RawBigSetKVService_bsgGetSliceFromItem_result {
 public:

  RawBigSetKVService_bsgGetSliceFromItem_result(const RawBigSetKVService_bsgGetSliceFromItem_result&);
  RawBigSetKVService_bsgGetSliceFromItem_result& operator=(const RawBigSetKVService_bsgGetSliceFromItem_result&);
  RawBigSetKVService_bsgGetSliceFromItem_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgGetSliceFromItem_result() noexcept;
  TItemSetResult success;

  _RawBigSetKVService_bsgGetSliceFromItem_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const RawBigSetKVService_bsgGetSliceFromItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceFromItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceFromItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItem_presult__isset {
  _RawBigSetKVService_bsgGetSliceFromItem_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceFromItem_presult__isset;

class RawBigSetKVService_bsgGetSliceFromItem_presult {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceFromItem_presult() noexcept;
  TItemSetResult* success;

  _RawBigSetKVService_bsgGetSliceFromItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgGetSliceR_args__isset {
  _RawBigSetKVService_bsgGetSliceR_args__isset() : rootID(false), fromIdx(false), count(false) {}
  bool rootID :1;
  bool fromIdx :1;
  bool count :1;
} _RawBigSetKVService_bsgGetSliceR_args__isset;

class RawBigSetKVService_bsgGetSliceR_args {
 public:

  RawBigSetKVService_bsgGetSliceR_args(const RawBigSetKVService_bsgGetSliceR_args&) noexcept;
  RawBigSetKVService_bsgGetSliceR_args& operator=(const RawBigSetKVService_bsgGetSliceR_args&) noexcept;
  RawBigSetKVService_bsgGetSliceR_args() noexcept
                                       : rootID(0),
                                         fromIdx(0),
                                         count(0) {
  }

  virtual ~RawBigSetKVService_bsgGetSliceR_args() noexcept;
  TContainerKey rootID;
  int32_t fromIdx;
  int32_t count;

  _RawBigSetKVService_bsgGetSliceR_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_fromIdx(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const RawBigSetKVService_bsgGetSliceR_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(fromIdx == rhs.fromIdx))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgGetSliceR_pargs {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceR_pargs() noexcept;
  const TContainerKey* rootID;
  const int32_t* fromIdx;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceR_result__isset {
  _RawBigSetKVService_bsgGetSliceR_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceR_result__isset;

class RawBigSetKVService_bsgGetSliceR_result {
 public:

  RawBigSetKVService_bsgGetSliceR_result(const RawBigSetKVService_bsgGetSliceR_result&);
  RawBigSetKVService_bsgGetSliceR_result& operator=(const RawBigSetKVService_bsgGetSliceR_result&);
  RawBigSetKVService_bsgGetSliceR_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgGetSliceR_result() noexcept;
  TItemSetResult success;

  _RawBigSetKVService_bsgGetSliceR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const RawBigSetKVService_bsgGetSliceR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceR_presult__isset {
  _RawBigSetKVService_bsgGetSliceR_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceR_presult__isset;

class RawBigSetKVService_bsgGetSliceR_presult {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceR_presult() noexcept;
  TItemSetResult* success;

  _RawBigSetKVService_bsgGetSliceR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItemR_args__isset {
  _RawBigSetKVService_bsgGetSliceFromItemR_args__isset() : rootID(false), fromKey(false), count(false) {}
  bool rootID :1;
  bool fromKey :1;
  bool count :1;
} _RawBigSetKVService_bsgGetSliceFromItemR_args__isset;

class RawBigSetKVService_bsgGetSliceFromItemR_args {
 public:

  RawBigSetKVService_bsgGetSliceFromItemR_args(const RawBigSetKVService_bsgGetSliceFromItemR_args&);
  RawBigSetKVService_bsgGetSliceFromItemR_args& operator=(const RawBigSetKVService_bsgGetSliceFromItemR_args&);
  RawBigSetKVService_bsgGetSliceFromItemR_args() noexcept
                                               : rootID(0),
                                                 fromKey(),
                                                 count(0) {
  }

  virtual ~RawBigSetKVService_bsgGetSliceFromItemR_args() noexcept;
  TContainerKey rootID;
  TItemKey fromKey;
  int32_t count;

  _RawBigSetKVService_bsgGetSliceFromItemR_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const RawBigSetKVService_bsgGetSliceFromItemR_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceFromItemR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceFromItemR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgGetSliceFromItemR_pargs {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceFromItemR_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItemR_result__isset {
  _RawBigSetKVService_bsgGetSliceFromItemR_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceFromItemR_result__isset;

class RawBigSetKVService_bsgGetSliceFromItemR_result {
 public:

  RawBigSetKVService_bsgGetSliceFromItemR_result(const RawBigSetKVService_bsgGetSliceFromItemR_result&);
  RawBigSetKVService_bsgGetSliceFromItemR_result& operator=(const RawBigSetKVService_bsgGetSliceFromItemR_result&);
  RawBigSetKVService_bsgGetSliceFromItemR_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgGetSliceFromItemR_result() noexcept;
  TItemSetResult success;

  _RawBigSetKVService_bsgGetSliceFromItemR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const RawBigSetKVService_bsgGetSliceFromItemR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgGetSliceFromItemR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgGetSliceFromItemR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgGetSliceFromItemR_presult__isset {
  _RawBigSetKVService_bsgGetSliceFromItemR_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgGetSliceFromItemR_presult__isset;

class RawBigSetKVService_bsgGetSliceFromItemR_presult {
 public:


  virtual ~RawBigSetKVService_bsgGetSliceFromItemR_presult() noexcept;
  TItemSetResult* success;

  _RawBigSetKVService_bsgGetSliceFromItemR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgRangeQuery_args__isset {
  _RawBigSetKVService_bsgRangeQuery_args__isset() : rootID(false), startKey(false), endKey(false) {}
  bool rootID :1;
  bool startKey :1;
  bool endKey :1;
} _RawBigSetKVService_bsgRangeQuery_args__isset;

class RawBigSetKVService_bsgRangeQuery_args {
 public:

  RawBigSetKVService_bsgRangeQuery_args(const RawBigSetKVService_bsgRangeQuery_args&);
  RawBigSetKVService_bsgRangeQuery_args& operator=(const RawBigSetKVService_bsgRangeQuery_args&);
  RawBigSetKVService_bsgRangeQuery_args() noexcept
                                        : rootID(0),
                                          startKey(),
                                          endKey() {
  }

  virtual ~RawBigSetKVService_bsgRangeQuery_args() noexcept;
  TContainerKey rootID;
  TItemKey startKey;
  TItemKey endKey;

  _RawBigSetKVService_bsgRangeQuery_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_startKey(const TItemKey& val);

  void __set_endKey(const TItemKey& val);

  bool operator == (const RawBigSetKVService_bsgRangeQuery_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(startKey == rhs.startKey))
      return false;
    if (!(endKey == rhs.endKey))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgRangeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgRangeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgRangeQuery_pargs {
 public:


  virtual ~RawBigSetKVService_bsgRangeQuery_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemKey* startKey;
  const TItemKey* endKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgRangeQuery_result__isset {
  _RawBigSetKVService_bsgRangeQuery_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgRangeQuery_result__isset;

class RawBigSetKVService_bsgRangeQuery_result {
 public:

  RawBigSetKVService_bsgRangeQuery_result(const RawBigSetKVService_bsgRangeQuery_result&);
  RawBigSetKVService_bsgRangeQuery_result& operator=(const RawBigSetKVService_bsgRangeQuery_result&);
  RawBigSetKVService_bsgRangeQuery_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgRangeQuery_result() noexcept;
  TItemSetResult success;

  _RawBigSetKVService_bsgRangeQuery_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const RawBigSetKVService_bsgRangeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgRangeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgRangeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgRangeQuery_presult__isset {
  _RawBigSetKVService_bsgRangeQuery_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgRangeQuery_presult__isset;

class RawBigSetKVService_bsgRangeQuery_presult {
 public:


  virtual ~RawBigSetKVService_bsgRangeQuery_presult() noexcept;
  TItemSetResult* success;

  _RawBigSetKVService_bsgRangeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_bsgMultiPut_args__isset {
  _RawBigSetKVService_bsgMultiPut_args__isset() : rootID(false), setData(false), getAddedItems(false), getReplacedItems(false) {}
  bool rootID :1;
  bool setData :1;
  bool getAddedItems :1;
  bool getReplacedItems :1;
} _RawBigSetKVService_bsgMultiPut_args__isset;

class RawBigSetKVService_bsgMultiPut_args {
 public:

  RawBigSetKVService_bsgMultiPut_args(const RawBigSetKVService_bsgMultiPut_args&);
  RawBigSetKVService_bsgMultiPut_args& operator=(const RawBigSetKVService_bsgMultiPut_args&);
  RawBigSetKVService_bsgMultiPut_args() noexcept
                                      : rootID(0),
                                        getAddedItems(0),
                                        getReplacedItems(0) {
  }

  virtual ~RawBigSetKVService_bsgMultiPut_args() noexcept;
  TContainerKey rootID;
  TItemSet setData;
  bool getAddedItems;
  bool getReplacedItems;

  _RawBigSetKVService_bsgMultiPut_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  void __set_setData(const TItemSet& val);

  void __set_getAddedItems(const bool val);

  void __set_getReplacedItems(const bool val);

  bool operator == (const RawBigSetKVService_bsgMultiPut_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    if (!(setData == rhs.setData))
      return false;
    if (!(getAddedItems == rhs.getAddedItems))
      return false;
    if (!(getReplacedItems == rhs.getReplacedItems))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgMultiPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgMultiPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_bsgMultiPut_pargs {
 public:


  virtual ~RawBigSetKVService_bsgMultiPut_pargs() noexcept;
  const TContainerKey* rootID;
  const TItemSet* setData;
  const bool* getAddedItems;
  const bool* getReplacedItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgMultiPut_result__isset {
  _RawBigSetKVService_bsgMultiPut_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgMultiPut_result__isset;

class RawBigSetKVService_bsgMultiPut_result {
 public:

  RawBigSetKVService_bsgMultiPut_result(const RawBigSetKVService_bsgMultiPut_result&);
  RawBigSetKVService_bsgMultiPut_result& operator=(const RawBigSetKVService_bsgMultiPut_result&);
  RawBigSetKVService_bsgMultiPut_result() noexcept {
  }

  virtual ~RawBigSetKVService_bsgMultiPut_result() noexcept;
  TMultiPutItemResult success;

  _RawBigSetKVService_bsgMultiPut_result__isset __isset;

  void __set_success(const TMultiPutItemResult& val);

  bool operator == (const RawBigSetKVService_bsgMultiPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_bsgMultiPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_bsgMultiPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_bsgMultiPut_presult__isset {
  _RawBigSetKVService_bsgMultiPut_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_bsgMultiPut_presult__isset;

class RawBigSetKVService_bsgMultiPut_presult {
 public:


  virtual ~RawBigSetKVService_bsgMultiPut_presult() noexcept;
  TMultiPutItemResult* success;

  _RawBigSetKVService_bsgMultiPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_getTotalCount_args__isset {
  _RawBigSetKVService_getTotalCount_args__isset() : rootID(false) {}
  bool rootID :1;
} _RawBigSetKVService_getTotalCount_args__isset;

class RawBigSetKVService_getTotalCount_args {
 public:

  RawBigSetKVService_getTotalCount_args(const RawBigSetKVService_getTotalCount_args&) noexcept;
  RawBigSetKVService_getTotalCount_args& operator=(const RawBigSetKVService_getTotalCount_args&) noexcept;
  RawBigSetKVService_getTotalCount_args() noexcept
                                        : rootID(0) {
  }

  virtual ~RawBigSetKVService_getTotalCount_args() noexcept;
  TContainerKey rootID;

  _RawBigSetKVService_getTotalCount_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  bool operator == (const RawBigSetKVService_getTotalCount_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_getTotalCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_getTotalCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_getTotalCount_pargs {
 public:


  virtual ~RawBigSetKVService_getTotalCount_pargs() noexcept;
  const TContainerKey* rootID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_getTotalCount_result__isset {
  _RawBigSetKVService_getTotalCount_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_getTotalCount_result__isset;

class RawBigSetKVService_getTotalCount_result {
 public:

  RawBigSetKVService_getTotalCount_result(const RawBigSetKVService_getTotalCount_result&) noexcept;
  RawBigSetKVService_getTotalCount_result& operator=(const RawBigSetKVService_getTotalCount_result&) noexcept;
  RawBigSetKVService_getTotalCount_result() noexcept
                                          : success(0) {
  }

  virtual ~RawBigSetKVService_getTotalCount_result() noexcept;
  int64_t success;

  _RawBigSetKVService_getTotalCount_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const RawBigSetKVService_getTotalCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_getTotalCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_getTotalCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_getTotalCount_presult__isset {
  _RawBigSetKVService_getTotalCount_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_getTotalCount_presult__isset;

class RawBigSetKVService_getTotalCount_presult {
 public:


  virtual ~RawBigSetKVService_getTotalCount_presult() noexcept;
  int64_t* success;

  _RawBigSetKVService_getTotalCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RawBigSetKVService_removeAll_args__isset {
  _RawBigSetKVService_removeAll_args__isset() : rootID(false) {}
  bool rootID :1;
} _RawBigSetKVService_removeAll_args__isset;

class RawBigSetKVService_removeAll_args {
 public:

  RawBigSetKVService_removeAll_args(const RawBigSetKVService_removeAll_args&) noexcept;
  RawBigSetKVService_removeAll_args& operator=(const RawBigSetKVService_removeAll_args&) noexcept;
  RawBigSetKVService_removeAll_args() noexcept
                                    : rootID(0) {
  }

  virtual ~RawBigSetKVService_removeAll_args() noexcept;
  TContainerKey rootID;

  _RawBigSetKVService_removeAll_args__isset __isset;

  void __set_rootID(const TContainerKey val);

  bool operator == (const RawBigSetKVService_removeAll_args & rhs) const
  {
    if (!(rootID == rhs.rootID))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_removeAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_removeAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RawBigSetKVService_removeAll_pargs {
 public:


  virtual ~RawBigSetKVService_removeAll_pargs() noexcept;
  const TContainerKey* rootID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_removeAll_result__isset {
  _RawBigSetKVService_removeAll_result__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_removeAll_result__isset;

class RawBigSetKVService_removeAll_result {
 public:

  RawBigSetKVService_removeAll_result(const RawBigSetKVService_removeAll_result&) noexcept;
  RawBigSetKVService_removeAll_result& operator=(const RawBigSetKVService_removeAll_result&) noexcept;
  RawBigSetKVService_removeAll_result() noexcept
                                      : success(0) {
  }

  virtual ~RawBigSetKVService_removeAll_result() noexcept;
  int64_t success;

  _RawBigSetKVService_removeAll_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const RawBigSetKVService_removeAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RawBigSetKVService_removeAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RawBigSetKVService_removeAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RawBigSetKVService_removeAll_presult__isset {
  _RawBigSetKVService_removeAll_presult__isset() : success(false) {}
  bool success :1;
} _RawBigSetKVService_removeAll_presult__isset;

class RawBigSetKVService_removeAll_presult {
 public:


  virtual ~RawBigSetKVService_removeAll_presult() noexcept;
  int64_t* success;

  _RawBigSetKVService_removeAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RawBigSetKVServiceClient : virtual public RawBigSetKVServiceIf {
 public:
  RawBigSetKVServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RawBigSetKVServiceClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void bsgPutItem(TPutItemResult& _return, const TContainerKey rootID, const TItem& item) override;
  void send_bsgPutItem(const TContainerKey rootID, const TItem& item);
  void recv_bsgPutItem(TPutItemResult& _return);
  bool bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey) override;
  void send_bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey);
  bool recv_bsgRemoveItem();
  void bsgExisted(TExistedResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override;
  void send_bsgExisted(const TContainerKey rootID, const TItemKey& itemKey);
  void recv_bsgExisted(TExistedResult& _return);
  void bsgGetItem(TItemResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override;
  void send_bsgGetItem(const TContainerKey rootID, const TItemKey& itemKey);
  void recv_bsgGetItem(TItemResult& _return);
  void bsgGetSlice(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override;
  void send_bsgGetSlice(const TContainerKey rootID, const int32_t fromIdx, const int32_t count);
  void recv_bsgGetSlice(TItemSetResult& _return);
  void bsgGetSliceFromItem(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override;
  void send_bsgGetSliceFromItem(const TContainerKey rootID, const TItemKey& fromKey, const int32_t count);
  void recv_bsgGetSliceFromItem(TItemSetResult& _return);
  void bsgGetSliceR(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override;
  void send_bsgGetSliceR(const TContainerKey rootID, const int32_t fromIdx, const int32_t count);
  void recv_bsgGetSliceR(TItemSetResult& _return);
  void bsgGetSliceFromItemR(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override;
  void send_bsgGetSliceFromItemR(const TContainerKey rootID, const TItemKey& fromKey, const int32_t count);
  void recv_bsgGetSliceFromItemR(TItemSetResult& _return);
  void bsgRangeQuery(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey) override;
  void send_bsgRangeQuery(const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey);
  void recv_bsgRangeQuery(TItemSetResult& _return);
  void bsgMultiPut(TMultiPutItemResult& _return, const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) override;
  void send_bsgMultiPut(const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_bsgMultiPut(TMultiPutItemResult& _return);
  int64_t getTotalCount(const TContainerKey rootID) override;
  void send_getTotalCount(const TContainerKey rootID);
  int64_t recv_getTotalCount();
  int64_t removeAll(const TContainerKey rootID) override;
  void send_removeAll(const TContainerKey rootID);
  int64_t recv_removeAll();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RawBigSetKVServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RawBigSetKVServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
 private:
  typedef  void (RawBigSetKVServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_bsgPutItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgRemoveItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgExisted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgGetItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgGetSlice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgGetSliceFromItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgGetSliceR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgGetSliceFromItemR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgRangeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsgMultiPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RawBigSetKVServiceProcessor(::std::shared_ptr<RawBigSetKVServiceIf> iface) :
    iface_(iface) {
    processMap_["bsgPutItem"] = &RawBigSetKVServiceProcessor::process_bsgPutItem;
    processMap_["bsgRemoveItem"] = &RawBigSetKVServiceProcessor::process_bsgRemoveItem;
    processMap_["bsgExisted"] = &RawBigSetKVServiceProcessor::process_bsgExisted;
    processMap_["bsgGetItem"] = &RawBigSetKVServiceProcessor::process_bsgGetItem;
    processMap_["bsgGetSlice"] = &RawBigSetKVServiceProcessor::process_bsgGetSlice;
    processMap_["bsgGetSliceFromItem"] = &RawBigSetKVServiceProcessor::process_bsgGetSliceFromItem;
    processMap_["bsgGetSliceR"] = &RawBigSetKVServiceProcessor::process_bsgGetSliceR;
    processMap_["bsgGetSliceFromItemR"] = &RawBigSetKVServiceProcessor::process_bsgGetSliceFromItemR;
    processMap_["bsgRangeQuery"] = &RawBigSetKVServiceProcessor::process_bsgRangeQuery;
    processMap_["bsgMultiPut"] = &RawBigSetKVServiceProcessor::process_bsgMultiPut;
    processMap_["getTotalCount"] = &RawBigSetKVServiceProcessor::process_getTotalCount;
    processMap_["removeAll"] = &RawBigSetKVServiceProcessor::process_removeAll;
  }

  virtual ~RawBigSetKVServiceProcessor() {}
};

class RawBigSetKVServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RawBigSetKVServiceProcessorFactory(const ::std::shared_ptr< RawBigSetKVServiceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< RawBigSetKVServiceIfFactory > handlerFactory_;
};

class RawBigSetKVServiceMultiface : virtual public RawBigSetKVServiceIf {
 public:
  RawBigSetKVServiceMultiface(std::vector<std::shared_ptr<RawBigSetKVServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RawBigSetKVServiceMultiface() {}
 protected:
  std::vector<std::shared_ptr<RawBigSetKVServiceIf> > ifaces_;
  RawBigSetKVServiceMultiface() {}
  void add(::std::shared_ptr<RawBigSetKVServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void bsgPutItem(TPutItemResult& _return, const TContainerKey rootID, const TItem& item) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgPutItem(_return, rootID, item);
    }
    ifaces_[i]->bsgPutItem(_return, rootID, item);
    return;
  }

  bool bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgRemoveItem(key, itemKey);
    }
    return ifaces_[i]->bsgRemoveItem(key, itemKey);
  }

  void bsgExisted(TExistedResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgExisted(_return, rootID, itemKey);
    }
    ifaces_[i]->bsgExisted(_return, rootID, itemKey);
    return;
  }

  void bsgGetItem(TItemResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgGetItem(_return, rootID, itemKey);
    }
    ifaces_[i]->bsgGetItem(_return, rootID, itemKey);
    return;
  }

  void bsgGetSlice(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgGetSlice(_return, rootID, fromIdx, count);
    }
    ifaces_[i]->bsgGetSlice(_return, rootID, fromIdx, count);
    return;
  }

  void bsgGetSliceFromItem(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgGetSliceFromItem(_return, rootID, fromKey, count);
    }
    ifaces_[i]->bsgGetSliceFromItem(_return, rootID, fromKey, count);
    return;
  }

  void bsgGetSliceR(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgGetSliceR(_return, rootID, fromIdx, count);
    }
    ifaces_[i]->bsgGetSliceR(_return, rootID, fromIdx, count);
    return;
  }

  void bsgGetSliceFromItemR(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgGetSliceFromItemR(_return, rootID, fromKey, count);
    }
    ifaces_[i]->bsgGetSliceFromItemR(_return, rootID, fromKey, count);
    return;
  }

  void bsgRangeQuery(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgRangeQuery(_return, rootID, startKey, endKey);
    }
    ifaces_[i]->bsgRangeQuery(_return, rootID, startKey, endKey);
    return;
  }

  void bsgMultiPut(TMultiPutItemResult& _return, const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsgMultiPut(_return, rootID, setData, getAddedItems, getReplacedItems);
    }
    ifaces_[i]->bsgMultiPut(_return, rootID, setData, getAddedItems, getReplacedItems);
    return;
  }

  int64_t getTotalCount(const TContainerKey rootID) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalCount(rootID);
    }
    return ifaces_[i]->getTotalCount(rootID);
  }

  int64_t removeAll(const TContainerKey rootID) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeAll(rootID);
    }
    return ifaces_[i]->removeAll(rootID);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RawBigSetKVServiceConcurrentClient : virtual public RawBigSetKVServiceIf {
 public:
  RawBigSetKVServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RawBigSetKVServiceConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void bsgPutItem(TPutItemResult& _return, const TContainerKey rootID, const TItem& item) override;
  int32_t send_bsgPutItem(const TContainerKey rootID, const TItem& item);
  void recv_bsgPutItem(TPutItemResult& _return, const int32_t seqid);
  bool bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey) override;
  int32_t send_bsgRemoveItem(const TMetaKey key, const TItemKey& itemKey);
  bool recv_bsgRemoveItem(const int32_t seqid);
  void bsgExisted(TExistedResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override;
  int32_t send_bsgExisted(const TContainerKey rootID, const TItemKey& itemKey);
  void recv_bsgExisted(TExistedResult& _return, const int32_t seqid);
  void bsgGetItem(TItemResult& _return, const TContainerKey rootID, const TItemKey& itemKey) override;
  int32_t send_bsgGetItem(const TContainerKey rootID, const TItemKey& itemKey);
  void recv_bsgGetItem(TItemResult& _return, const int32_t seqid);
  void bsgGetSlice(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override;
  int32_t send_bsgGetSlice(const TContainerKey rootID, const int32_t fromIdx, const int32_t count);
  void recv_bsgGetSlice(TItemSetResult& _return, const int32_t seqid);
  void bsgGetSliceFromItem(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override;
  int32_t send_bsgGetSliceFromItem(const TContainerKey rootID, const TItemKey& fromKey, const int32_t count);
  void recv_bsgGetSliceFromItem(TItemSetResult& _return, const int32_t seqid);
  void bsgGetSliceR(TItemSetResult& _return, const TContainerKey rootID, const int32_t fromIdx, const int32_t count) override;
  int32_t send_bsgGetSliceR(const TContainerKey rootID, const int32_t fromIdx, const int32_t count);
  void recv_bsgGetSliceR(TItemSetResult& _return, const int32_t seqid);
  void bsgGetSliceFromItemR(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& fromKey, const int32_t count) override;
  int32_t send_bsgGetSliceFromItemR(const TContainerKey rootID, const TItemKey& fromKey, const int32_t count);
  void recv_bsgGetSliceFromItemR(TItemSetResult& _return, const int32_t seqid);
  void bsgRangeQuery(TItemSetResult& _return, const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey) override;
  int32_t send_bsgRangeQuery(const TContainerKey rootID, const TItemKey& startKey, const TItemKey& endKey);
  void recv_bsgRangeQuery(TItemSetResult& _return, const int32_t seqid);
  void bsgMultiPut(TMultiPutItemResult& _return, const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) override;
  int32_t send_bsgMultiPut(const TContainerKey rootID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_bsgMultiPut(TMultiPutItemResult& _return, const int32_t seqid);
  int64_t getTotalCount(const TContainerKey rootID) override;
  int32_t send_getTotalCount(const TContainerKey rootID);
  int64_t recv_getTotalCount(const int32_t seqid);
  int64_t removeAll(const TContainerKey rootID) override;
  int32_t send_removeAll(const TContainerKey rootID);
  int64_t recv_removeAll(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
