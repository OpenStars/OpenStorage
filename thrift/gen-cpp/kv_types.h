/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef kv_TYPES_H
#define kv_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace kv {

typedef std::string KType;

typedef std::string VType;

typedef std::vector<class KVPair>  KVList;

typedef std::vector<KType>  KList;

typedef std::map<KType, VType>  KVMap;

class KVPair;


class KVPair : public virtual ::apache::thrift::TBase {
 public:

  KVPair(const KVPair&);
  KVPair& operator=(const KVPair&);
  KVPair() : first(), second() {
  }

  virtual ~KVPair() throw();
  KType first;
  VType second;

  void __set_first(const KType& val);

  void __set_second(const VType& val);

  bool operator == (const KVPair & rhs) const
  {
    if (!(first == rhs.first))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const KVPair &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const KVPair & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(KVPair &a, KVPair &b);

std::ostream& operator<<(std::ostream& out, const KVPair& obj);

} // namespace

#endif
