/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "bskv_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace bskv {

int _kTErrorCodeValues[] = {
  TErrorCode::EGood,
  TErrorCode::ENoRootMeta,
  TErrorCode::ECouldNotConnectMetadata,
  TErrorCode::ECouldNotConnectIDGen,
  TErrorCode::ECouldNotConnectSmallSet,
  TErrorCode::ECouldNotConnectRootMetaMapping,
  TErrorCode::EItemNotExisted,
  TErrorCode::EUnknownException,
  TErrorCode::EBigSetNotExisted,
  TErrorCode::EBigSetCreated,
  TErrorCode::EBigSetAlreadyExisted,
  TErrorCode::EBigSetAssigned
};
const char* _kTErrorCodeNames[] = {
  "EGood",
  "ENoRootMeta",
  "ECouldNotConnectMetadata",
  "ECouldNotConnectIDGen",
  "ECouldNotConnectSmallSet",
  "ECouldNotConnectRootMetaMapping",
  "EItemNotExisted",
  "EUnknownException",
  "EBigSetNotExisted",
  "EBigSetCreated",
  "EBigSetAlreadyExisted",
  "EBigSetAssigned"
};
const std::map<int, const char*> _TErrorCode_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(12, _kTErrorCodeValues, _kTErrorCodeNames), ::apache::thrift::TEnumIterator(-1, nullptr, nullptr));

std::ostream& operator<<(std::ostream& out, const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}

std::string to_string(const TErrorCode::type& val) {
  std::map<int, const char*>::const_iterator it = _TErrorCode_VALUES_TO_NAMES.find(val);
  if (it != _TErrorCode_VALUES_TO_NAMES.end()) {
    return std::string(it->second);
  } else {
    return std::to_string(static_cast<int>(val));
  }
}


TItem::~TItem() noexcept {
}


void TItem::__set_key(const std::string& val) {
  this->key = val;
}

void TItem::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const TItem& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TItem::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_key = false;
  bool isset_value = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->key);
          isset_key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->value);
          isset_value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_key)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_value)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t TItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TItem");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TItem &a, TItem &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.value, b.value);
}

TItem::TItem(const TItem& other0) {
  key = other0.key;
  value = other0.value;
}
TItem& TItem::operator=(const TItem& other1) {
  key = other1.key;
  value = other1.value;
  return *this;
}
void TItem::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TItem(";
  out << "key=" << to_string(key);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


TItemSet::~TItemSet() noexcept {
}


void TItemSet::__set_items(const std::vector<TItem> & val) {
  this->items = val;
}
std::ostream& operator<<(std::ostream& out, const TItemSet& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TItemSet::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->items.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->items.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += this->items[_i6].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TItemSet::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TItemSet");

  xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_LIST, 1);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->items.size()));
    std::vector<TItem> ::const_iterator _iter7;
    for (_iter7 = this->items.begin(); _iter7 != this->items.end(); ++_iter7)
    {
      xfer += (*_iter7).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TItemSet &a, TItemSet &b) {
  using ::std::swap;
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

TItemSet::TItemSet(const TItemSet& other8) {
  items = other8.items;
  __isset = other8.__isset;
}
TItemSet& TItemSet::operator=(const TItemSet& other9) {
  items = other9.items;
  __isset = other9.__isset;
  return *this;
}
void TItemSet::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TItemSet(";
  out << "items=" << to_string(items);
  out << ")";
}


TItemResult::~TItemResult() noexcept {
}


void TItemResult::__set_error(const TErrorCode::type val) {
  this->error = val;
}

void TItemResult::__set_item(const TItem& val) {
  this->item = val;
__isset.item = true;
}
std::ostream& operator<<(std::ostream& out, const TItemResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TItemResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast10;
          xfer += iprot->readI32(ecast10);
          this->error = static_cast<TErrorCode::type>(ecast10);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->item.read(iprot);
          this->__isset.item = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TItemResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TItemResult");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->error));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.item) {
    xfer += oprot->writeFieldBegin("item", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->item.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TItemResult &a, TItemResult &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.item, b.item);
  swap(a.__isset, b.__isset);
}

TItemResult::TItemResult(const TItemResult& other11) {
  error = other11.error;
  item = other11.item;
  __isset = other11.__isset;
}
TItemResult& TItemResult::operator=(const TItemResult& other12) {
  error = other12.error;
  item = other12.item;
  __isset = other12.__isset;
  return *this;
}
void TItemResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TItemResult(";
  out << "error=" << to_string(error);
  out << ", " << "item="; (__isset.item ? (out << to_string(item)) : (out << "<null>"));
  out << ")";
}


TItemSetResult::~TItemSetResult() noexcept {
}


void TItemSetResult::__set_error(const TErrorCode::type val) {
  this->error = val;
}

void TItemSetResult::__set_items(const TItemSet& val) {
  this->items = val;
__isset.items = true;
}
std::ostream& operator<<(std::ostream& out, const TItemSetResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TItemSetResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast13;
          xfer += iprot->readI32(ecast13);
          this->error = static_cast<TErrorCode::type>(ecast13);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->items.read(iprot);
          this->__isset.items = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TItemSetResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TItemSetResult");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->error));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.items) {
    xfer += oprot->writeFieldBegin("items", ::apache::thrift::protocol::T_STRUCT, 2);
    xfer += this->items.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TItemSetResult &a, TItemSetResult &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.items, b.items);
  swap(a.__isset, b.__isset);
}

TItemSetResult::TItemSetResult(const TItemSetResult& other14) {
  error = other14.error;
  items = other14.items;
  __isset = other14.__isset;
}
TItemSetResult& TItemSetResult::operator=(const TItemSetResult& other15) {
  error = other15.error;
  items = other15.items;
  __isset = other15.__isset;
  return *this;
}
void TItemSetResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TItemSetResult(";
  out << "error=" << to_string(error);
  out << ", " << "items="; (__isset.items ? (out << to_string(items)) : (out << "<null>"));
  out << ")";
}


TPutItemResult::~TPutItemResult() noexcept {
}


void TPutItemResult::__set_error(const TErrorCode::type val) {
  this->error = val;
}

void TPutItemResult::__set_ok(const bool val) {
  this->ok = val;
}

void TPutItemResult::__set_oldItem(const TItem& val) {
  this->oldItem = val;
__isset.oldItem = true;
}
std::ostream& operator<<(std::ostream& out, const TPutItemResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TPutItemResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast16;
          xfer += iprot->readI32(ecast16);
          this->error = static_cast<TErrorCode::type>(ecast16);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->ok);
          this->__isset.ok = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->oldItem.read(iprot);
          this->__isset.oldItem = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TPutItemResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TPutItemResult");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->error));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ok", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->ok);
  xfer += oprot->writeFieldEnd();

  if (this->__isset.oldItem) {
    xfer += oprot->writeFieldBegin("oldItem", ::apache::thrift::protocol::T_STRUCT, 3);
    xfer += this->oldItem.write(oprot);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TPutItemResult &a, TPutItemResult &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.ok, b.ok);
  swap(a.oldItem, b.oldItem);
  swap(a.__isset, b.__isset);
}

TPutItemResult::TPutItemResult(const TPutItemResult& other17) {
  error = other17.error;
  ok = other17.ok;
  oldItem = other17.oldItem;
  __isset = other17.__isset;
}
TPutItemResult& TPutItemResult::operator=(const TPutItemResult& other18) {
  error = other18.error;
  ok = other18.ok;
  oldItem = other18.oldItem;
  __isset = other18.__isset;
  return *this;
}
void TPutItemResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TPutItemResult(";
  out << "error=" << to_string(error);
  out << ", " << "ok=" << to_string(ok);
  out << ", " << "oldItem="; (__isset.oldItem ? (out << to_string(oldItem)) : (out << "<null>"));
  out << ")";
}


TExistedResult::~TExistedResult() noexcept {
}


void TExistedResult::__set_error(const TErrorCode::type val) {
  this->error = val;
}

void TExistedResult::__set_existed(const bool val) {
  this->existed = val;
}
std::ostream& operator<<(std::ostream& out, const TExistedResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TExistedResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast19;
          xfer += iprot->readI32(ecast19);
          this->error = static_cast<TErrorCode::type>(ecast19);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->existed);
          this->__isset.existed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TExistedResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TExistedResult");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->error));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("existed", ::apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->existed);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TExistedResult &a, TExistedResult &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.existed, b.existed);
  swap(a.__isset, b.__isset);
}

TExistedResult::TExistedResult(const TExistedResult& other20) noexcept {
  error = other20.error;
  existed = other20.existed;
  __isset = other20.__isset;
}
TExistedResult& TExistedResult::operator=(const TExistedResult& other21) noexcept {
  error = other21.error;
  existed = other21.existed;
  __isset = other21.__isset;
  return *this;
}
void TExistedResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TExistedResult(";
  out << "error=" << to_string(error);
  out << ", " << "existed=" << to_string(existed);
  out << ")";
}


TMultiPutItemResult::~TMultiPutItemResult() noexcept {
}


void TMultiPutItemResult::__set_error(const TErrorCode::type val) {
  this->error = val;
}

void TMultiPutItemResult::__set_added(const std::vector<TItemKey> & val) {
  this->added = val;
__isset.added = true;
}

void TMultiPutItemResult::__set_replaced(const std::vector<TItem> & val) {
  this->replaced = val;
__isset.replaced = true;
}
std::ostream& operator<<(std::ostream& out, const TMultiPutItemResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t TMultiPutItemResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast22;
          xfer += iprot->readI32(ecast22);
          this->error = static_cast<TErrorCode::type>(ecast22);
          this->__isset.error = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->added.clear();
            uint32_t _size23;
            ::apache::thrift::protocol::TType _etype26;
            xfer += iprot->readListBegin(_etype26, _size23);
            this->added.resize(_size23);
            uint32_t _i27;
            for (_i27 = 0; _i27 < _size23; ++_i27)
            {
              xfer += iprot->readBinary(this->added[_i27]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.added = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->replaced.clear();
            uint32_t _size28;
            ::apache::thrift::protocol::TType _etype31;
            xfer += iprot->readListBegin(_etype31, _size28);
            this->replaced.resize(_size28);
            uint32_t _i32;
            for (_i32 = 0; _i32 < _size28; ++_i32)
            {
              xfer += this->replaced[_i32].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.replaced = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TMultiPutItemResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("TMultiPutItemResult");

  xfer += oprot->writeFieldBegin("error", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(static_cast<int32_t>(this->error));
  xfer += oprot->writeFieldEnd();

  if (this->__isset.added) {
    xfer += oprot->writeFieldBegin("added", ::apache::thrift::protocol::T_LIST, 2);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->added.size()));
      std::vector<TItemKey> ::const_iterator _iter33;
      for (_iter33 = this->added.begin(); _iter33 != this->added.end(); ++_iter33)
      {
        xfer += oprot->writeBinary((*_iter33));
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.replaced) {
    xfer += oprot->writeFieldBegin("replaced", ::apache::thrift::protocol::T_LIST, 3);
    {
      xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->replaced.size()));
      std::vector<TItem> ::const_iterator _iter34;
      for (_iter34 = this->replaced.begin(); _iter34 != this->replaced.end(); ++_iter34)
      {
        xfer += (*_iter34).write(oprot);
      }
      xfer += oprot->writeListEnd();
    }
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TMultiPutItemResult &a, TMultiPutItemResult &b) {
  using ::std::swap;
  swap(a.error, b.error);
  swap(a.added, b.added);
  swap(a.replaced, b.replaced);
  swap(a.__isset, b.__isset);
}

TMultiPutItemResult::TMultiPutItemResult(const TMultiPutItemResult& other35) {
  error = other35.error;
  added = other35.added;
  replaced = other35.replaced;
  __isset = other35.__isset;
}
TMultiPutItemResult& TMultiPutItemResult::operator=(const TMultiPutItemResult& other36) {
  error = other36.error;
  added = other36.added;
  replaced = other36.replaced;
  __isset = other36.__isset;
  return *this;
}
void TMultiPutItemResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "TMultiPutItemResult(";
  out << "error=" << to_string(error);
  out << ", " << "added="; (__isset.added ? (out << to_string(added)) : (out << "<null>"));
  out << ", " << "replaced="; (__isset.replaced ? (out << to_string(replaced)) : (out << "<null>"));
  out << ")";
}

} // namespace
