/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TStringBigSetKVService_H
#define TStringBigSetKVService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "bskv_types.h"

namespace bskv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TStringBigSetKVServiceIf {
 public:
  virtual ~TStringBigSetKVServiceIf() {}
  virtual void bsPutItem(TPutItemResult& _return, const TStringKey& bsName, const TItem& item) = 0;
  virtual bool bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey) = 0;
  virtual void bsExisted(TExistedResult& _return, const TStringKey& bsName, const TItemKey& itemKey) = 0;
  virtual void bsGetItem(TItemResult& _return, const TStringKey& bsName, const TItemKey& itemKey) = 0;
  virtual void bsGetSlice(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count) = 0;
  virtual void bsGetSliceFromItem(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void bsGetSliceR(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count) = 0;
  virtual void bsGetSliceFromItemR(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void bsRangeQuery(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey) = 0;
  virtual void bsMultiPut(TMultiPutItemResult& _return, const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) = 0;
  virtual int64_t getTotalCount(const TStringKey& bsName) = 0;
  virtual int64_t removeAll(const TStringKey& bsName) = 0;
};

class TStringBigSetKVServiceIfFactory {
 public:
  typedef TStringBigSetKVServiceIf Handler;

  virtual ~TStringBigSetKVServiceIfFactory() {}

  virtual TStringBigSetKVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TStringBigSetKVServiceIf* /* handler */) = 0;
};

class TStringBigSetKVServiceIfSingletonFactory : virtual public TStringBigSetKVServiceIfFactory {
 public:
  TStringBigSetKVServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf>& iface) : iface_(iface) {}
  virtual ~TStringBigSetKVServiceIfSingletonFactory() {}

  virtual TStringBigSetKVServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TStringBigSetKVServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> iface_;
};

class TStringBigSetKVServiceNull : virtual public TStringBigSetKVServiceIf {
 public:
  virtual ~TStringBigSetKVServiceNull() {}
  void bsPutItem(TPutItemResult& /* _return */, const TStringKey& /* bsName */, const TItem& /* item */) {
    return;
  }
  bool bsRemoveItem(const TStringKey& /* bsName */, const TItemKey& /* itemKey */) {
    bool _return = false;
    return _return;
  }
  void bsExisted(TExistedResult& /* _return */, const TStringKey& /* bsName */, const TItemKey& /* itemKey */) {
    return;
  }
  void bsGetItem(TItemResult& /* _return */, const TStringKey& /* bsName */, const TItemKey& /* itemKey */) {
    return;
  }
  void bsGetSlice(TItemSetResult& /* _return */, const TStringKey& /* bsName */, const int32_t /* fromPos */, const int32_t /* count */) {
    return;
  }
  void bsGetSliceFromItem(TItemSetResult& /* _return */, const TStringKey& /* bsName */, const TItemKey& /* fromKey */, const int32_t /* count */) {
    return;
  }
  void bsGetSliceR(TItemSetResult& /* _return */, const TStringKey& /* bsName */, const int32_t /* fromPos */, const int32_t /* count */) {
    return;
  }
  void bsGetSliceFromItemR(TItemSetResult& /* _return */, const TStringKey& /* bsName */, const TItemKey& /* fromKey */, const int32_t /* count */) {
    return;
  }
  void bsRangeQuery(TItemSetResult& /* _return */, const TStringKey& /* bsName */, const TItemKey& /* startKey */, const TItemKey& /* endKey */) {
    return;
  }
  void bsMultiPut(TMultiPutItemResult& /* _return */, const TStringKey& /* bsName */, const TItemSet& /* setData */, const bool /* getAddedItems */, const bool /* getReplacedItems */) {
    return;
  }
  int64_t getTotalCount(const TStringKey& /* bsName */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t removeAll(const TStringKey& /* bsName */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _TStringBigSetKVService_bsPutItem_args__isset {
  _TStringBigSetKVService_bsPutItem_args__isset() : bsName(false), item(false) {}
  bool bsName :1;
  bool item :1;
} _TStringBigSetKVService_bsPutItem_args__isset;

class TStringBigSetKVService_bsPutItem_args {
 public:

  TStringBigSetKVService_bsPutItem_args(const TStringBigSetKVService_bsPutItem_args&);
  TStringBigSetKVService_bsPutItem_args& operator=(const TStringBigSetKVService_bsPutItem_args&);
  TStringBigSetKVService_bsPutItem_args() : bsName() {
  }

  virtual ~TStringBigSetKVService_bsPutItem_args() throw();
  TStringKey bsName;
  TItem item;

  _TStringBigSetKVService_bsPutItem_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_item(const TItem& val);

  bool operator == (const TStringBigSetKVService_bsPutItem_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsPutItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsPutItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsPutItem_pargs {
 public:


  virtual ~TStringBigSetKVService_bsPutItem_pargs() throw();
  const TStringKey* bsName;
  const TItem* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsPutItem_result__isset {
  _TStringBigSetKVService_bsPutItem_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsPutItem_result__isset;

class TStringBigSetKVService_bsPutItem_result {
 public:

  TStringBigSetKVService_bsPutItem_result(const TStringBigSetKVService_bsPutItem_result&);
  TStringBigSetKVService_bsPutItem_result& operator=(const TStringBigSetKVService_bsPutItem_result&);
  TStringBigSetKVService_bsPutItem_result() {
  }

  virtual ~TStringBigSetKVService_bsPutItem_result() throw();
  TPutItemResult success;

  _TStringBigSetKVService_bsPutItem_result__isset __isset;

  void __set_success(const TPutItemResult& val);

  bool operator == (const TStringBigSetKVService_bsPutItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsPutItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsPutItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsPutItem_presult__isset {
  _TStringBigSetKVService_bsPutItem_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsPutItem_presult__isset;

class TStringBigSetKVService_bsPutItem_presult {
 public:


  virtual ~TStringBigSetKVService_bsPutItem_presult() throw();
  TPutItemResult* success;

  _TStringBigSetKVService_bsPutItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsRemoveItem_args__isset {
  _TStringBigSetKVService_bsRemoveItem_args__isset() : bsName(false), itemKey(false) {}
  bool bsName :1;
  bool itemKey :1;
} _TStringBigSetKVService_bsRemoveItem_args__isset;

class TStringBigSetKVService_bsRemoveItem_args {
 public:

  TStringBigSetKVService_bsRemoveItem_args(const TStringBigSetKVService_bsRemoveItem_args&);
  TStringBigSetKVService_bsRemoveItem_args& operator=(const TStringBigSetKVService_bsRemoveItem_args&);
  TStringBigSetKVService_bsRemoveItem_args() : bsName(), itemKey() {
  }

  virtual ~TStringBigSetKVService_bsRemoveItem_args() throw();
  TStringKey bsName;
  TItemKey itemKey;

  _TStringBigSetKVService_bsRemoveItem_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TStringBigSetKVService_bsRemoveItem_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsRemoveItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsRemoveItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsRemoveItem_pargs {
 public:


  virtual ~TStringBigSetKVService_bsRemoveItem_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsRemoveItem_result__isset {
  _TStringBigSetKVService_bsRemoveItem_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsRemoveItem_result__isset;

class TStringBigSetKVService_bsRemoveItem_result {
 public:

  TStringBigSetKVService_bsRemoveItem_result(const TStringBigSetKVService_bsRemoveItem_result&);
  TStringBigSetKVService_bsRemoveItem_result& operator=(const TStringBigSetKVService_bsRemoveItem_result&);
  TStringBigSetKVService_bsRemoveItem_result() : success(0) {
  }

  virtual ~TStringBigSetKVService_bsRemoveItem_result() throw();
  bool success;

  _TStringBigSetKVService_bsRemoveItem_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TStringBigSetKVService_bsRemoveItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsRemoveItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsRemoveItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsRemoveItem_presult__isset {
  _TStringBigSetKVService_bsRemoveItem_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsRemoveItem_presult__isset;

class TStringBigSetKVService_bsRemoveItem_presult {
 public:


  virtual ~TStringBigSetKVService_bsRemoveItem_presult() throw();
  bool* success;

  _TStringBigSetKVService_bsRemoveItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsExisted_args__isset {
  _TStringBigSetKVService_bsExisted_args__isset() : bsName(false), itemKey(false) {}
  bool bsName :1;
  bool itemKey :1;
} _TStringBigSetKVService_bsExisted_args__isset;

class TStringBigSetKVService_bsExisted_args {
 public:

  TStringBigSetKVService_bsExisted_args(const TStringBigSetKVService_bsExisted_args&);
  TStringBigSetKVService_bsExisted_args& operator=(const TStringBigSetKVService_bsExisted_args&);
  TStringBigSetKVService_bsExisted_args() : bsName(), itemKey() {
  }

  virtual ~TStringBigSetKVService_bsExisted_args() throw();
  TStringKey bsName;
  TItemKey itemKey;

  _TStringBigSetKVService_bsExisted_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TStringBigSetKVService_bsExisted_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsExisted_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsExisted_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsExisted_pargs {
 public:


  virtual ~TStringBigSetKVService_bsExisted_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsExisted_result__isset {
  _TStringBigSetKVService_bsExisted_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsExisted_result__isset;

class TStringBigSetKVService_bsExisted_result {
 public:

  TStringBigSetKVService_bsExisted_result(const TStringBigSetKVService_bsExisted_result&);
  TStringBigSetKVService_bsExisted_result& operator=(const TStringBigSetKVService_bsExisted_result&);
  TStringBigSetKVService_bsExisted_result() {
  }

  virtual ~TStringBigSetKVService_bsExisted_result() throw();
  TExistedResult success;

  _TStringBigSetKVService_bsExisted_result__isset __isset;

  void __set_success(const TExistedResult& val);

  bool operator == (const TStringBigSetKVService_bsExisted_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsExisted_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsExisted_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsExisted_presult__isset {
  _TStringBigSetKVService_bsExisted_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsExisted_presult__isset;

class TStringBigSetKVService_bsExisted_presult {
 public:


  virtual ~TStringBigSetKVService_bsExisted_presult() throw();
  TExistedResult* success;

  _TStringBigSetKVService_bsExisted_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsGetItem_args__isset {
  _TStringBigSetKVService_bsGetItem_args__isset() : bsName(false), itemKey(false) {}
  bool bsName :1;
  bool itemKey :1;
} _TStringBigSetKVService_bsGetItem_args__isset;

class TStringBigSetKVService_bsGetItem_args {
 public:

  TStringBigSetKVService_bsGetItem_args(const TStringBigSetKVService_bsGetItem_args&);
  TStringBigSetKVService_bsGetItem_args& operator=(const TStringBigSetKVService_bsGetItem_args&);
  TStringBigSetKVService_bsGetItem_args() : bsName(), itemKey() {
  }

  virtual ~TStringBigSetKVService_bsGetItem_args() throw();
  TStringKey bsName;
  TItemKey itemKey;

  _TStringBigSetKVService_bsGetItem_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TStringBigSetKVService_bsGetItem_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsGetItem_pargs {
 public:


  virtual ~TStringBigSetKVService_bsGetItem_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetItem_result__isset {
  _TStringBigSetKVService_bsGetItem_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetItem_result__isset;

class TStringBigSetKVService_bsGetItem_result {
 public:

  TStringBigSetKVService_bsGetItem_result(const TStringBigSetKVService_bsGetItem_result&);
  TStringBigSetKVService_bsGetItem_result& operator=(const TStringBigSetKVService_bsGetItem_result&);
  TStringBigSetKVService_bsGetItem_result() {
  }

  virtual ~TStringBigSetKVService_bsGetItem_result() throw();
  TItemResult success;

  _TStringBigSetKVService_bsGetItem_result__isset __isset;

  void __set_success(const TItemResult& val);

  bool operator == (const TStringBigSetKVService_bsGetItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetItem_presult__isset {
  _TStringBigSetKVService_bsGetItem_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetItem_presult__isset;

class TStringBigSetKVService_bsGetItem_presult {
 public:


  virtual ~TStringBigSetKVService_bsGetItem_presult() throw();
  TItemResult* success;

  _TStringBigSetKVService_bsGetItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsGetSlice_args__isset {
  _TStringBigSetKVService_bsGetSlice_args__isset() : bsName(false), fromPos(false), count(false) {}
  bool bsName :1;
  bool fromPos :1;
  bool count :1;
} _TStringBigSetKVService_bsGetSlice_args__isset;

class TStringBigSetKVService_bsGetSlice_args {
 public:

  TStringBigSetKVService_bsGetSlice_args(const TStringBigSetKVService_bsGetSlice_args&);
  TStringBigSetKVService_bsGetSlice_args& operator=(const TStringBigSetKVService_bsGetSlice_args&);
  TStringBigSetKVService_bsGetSlice_args() : bsName(), fromPos(0), count(0) {
  }

  virtual ~TStringBigSetKVService_bsGetSlice_args() throw();
  TStringKey bsName;
  int32_t fromPos;
  int32_t count;

  _TStringBigSetKVService_bsGetSlice_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_fromPos(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const TStringBigSetKVService_bsGetSlice_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(fromPos == rhs.fromPos))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSlice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSlice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsGetSlice_pargs {
 public:


  virtual ~TStringBigSetKVService_bsGetSlice_pargs() throw();
  const TStringKey* bsName;
  const int32_t* fromPos;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSlice_result__isset {
  _TStringBigSetKVService_bsGetSlice_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSlice_result__isset;

class TStringBigSetKVService_bsGetSlice_result {
 public:

  TStringBigSetKVService_bsGetSlice_result(const TStringBigSetKVService_bsGetSlice_result&);
  TStringBigSetKVService_bsGetSlice_result& operator=(const TStringBigSetKVService_bsGetSlice_result&);
  TStringBigSetKVService_bsGetSlice_result() {
  }

  virtual ~TStringBigSetKVService_bsGetSlice_result() throw();
  TItemSetResult success;

  _TStringBigSetKVService_bsGetSlice_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TStringBigSetKVService_bsGetSlice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSlice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSlice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSlice_presult__isset {
  _TStringBigSetKVService_bsGetSlice_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSlice_presult__isset;

class TStringBigSetKVService_bsGetSlice_presult {
 public:


  virtual ~TStringBigSetKVService_bsGetSlice_presult() throw();
  TItemSetResult* success;

  _TStringBigSetKVService_bsGetSlice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItem_args__isset {
  _TStringBigSetKVService_bsGetSliceFromItem_args__isset() : bsName(false), fromKey(false), count(false) {}
  bool bsName :1;
  bool fromKey :1;
  bool count :1;
} _TStringBigSetKVService_bsGetSliceFromItem_args__isset;

class TStringBigSetKVService_bsGetSliceFromItem_args {
 public:

  TStringBigSetKVService_bsGetSliceFromItem_args(const TStringBigSetKVService_bsGetSliceFromItem_args&);
  TStringBigSetKVService_bsGetSliceFromItem_args& operator=(const TStringBigSetKVService_bsGetSliceFromItem_args&);
  TStringBigSetKVService_bsGetSliceFromItem_args() : bsName(), fromKey(), count(0) {
  }

  virtual ~TStringBigSetKVService_bsGetSliceFromItem_args() throw();
  TStringKey bsName;
  TItemKey fromKey;
  int32_t count;

  _TStringBigSetKVService_bsGetSliceFromItem_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const TStringBigSetKVService_bsGetSliceFromItem_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceFromItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceFromItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsGetSliceFromItem_pargs {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceFromItem_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItem_result__isset {
  _TStringBigSetKVService_bsGetSliceFromItem_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceFromItem_result__isset;

class TStringBigSetKVService_bsGetSliceFromItem_result {
 public:

  TStringBigSetKVService_bsGetSliceFromItem_result(const TStringBigSetKVService_bsGetSliceFromItem_result&);
  TStringBigSetKVService_bsGetSliceFromItem_result& operator=(const TStringBigSetKVService_bsGetSliceFromItem_result&);
  TStringBigSetKVService_bsGetSliceFromItem_result() {
  }

  virtual ~TStringBigSetKVService_bsGetSliceFromItem_result() throw();
  TItemSetResult success;

  _TStringBigSetKVService_bsGetSliceFromItem_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TStringBigSetKVService_bsGetSliceFromItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceFromItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceFromItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItem_presult__isset {
  _TStringBigSetKVService_bsGetSliceFromItem_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceFromItem_presult__isset;

class TStringBigSetKVService_bsGetSliceFromItem_presult {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceFromItem_presult() throw();
  TItemSetResult* success;

  _TStringBigSetKVService_bsGetSliceFromItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsGetSliceR_args__isset {
  _TStringBigSetKVService_bsGetSliceR_args__isset() : bsName(false), fromPos(false), count(false) {}
  bool bsName :1;
  bool fromPos :1;
  bool count :1;
} _TStringBigSetKVService_bsGetSliceR_args__isset;

class TStringBigSetKVService_bsGetSliceR_args {
 public:

  TStringBigSetKVService_bsGetSliceR_args(const TStringBigSetKVService_bsGetSliceR_args&);
  TStringBigSetKVService_bsGetSliceR_args& operator=(const TStringBigSetKVService_bsGetSliceR_args&);
  TStringBigSetKVService_bsGetSliceR_args() : bsName(), fromPos(0), count(0) {
  }

  virtual ~TStringBigSetKVService_bsGetSliceR_args() throw();
  TStringKey bsName;
  int32_t fromPos;
  int32_t count;

  _TStringBigSetKVService_bsGetSliceR_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_fromPos(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const TStringBigSetKVService_bsGetSliceR_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(fromPos == rhs.fromPos))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsGetSliceR_pargs {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceR_pargs() throw();
  const TStringKey* bsName;
  const int32_t* fromPos;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceR_result__isset {
  _TStringBigSetKVService_bsGetSliceR_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceR_result__isset;

class TStringBigSetKVService_bsGetSliceR_result {
 public:

  TStringBigSetKVService_bsGetSliceR_result(const TStringBigSetKVService_bsGetSliceR_result&);
  TStringBigSetKVService_bsGetSliceR_result& operator=(const TStringBigSetKVService_bsGetSliceR_result&);
  TStringBigSetKVService_bsGetSliceR_result() {
  }

  virtual ~TStringBigSetKVService_bsGetSliceR_result() throw();
  TItemSetResult success;

  _TStringBigSetKVService_bsGetSliceR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TStringBigSetKVService_bsGetSliceR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceR_presult__isset {
  _TStringBigSetKVService_bsGetSliceR_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceR_presult__isset;

class TStringBigSetKVService_bsGetSliceR_presult {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceR_presult() throw();
  TItemSetResult* success;

  _TStringBigSetKVService_bsGetSliceR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItemR_args__isset {
  _TStringBigSetKVService_bsGetSliceFromItemR_args__isset() : bsName(false), fromKey(false), count(false) {}
  bool bsName :1;
  bool fromKey :1;
  bool count :1;
} _TStringBigSetKVService_bsGetSliceFromItemR_args__isset;

class TStringBigSetKVService_bsGetSliceFromItemR_args {
 public:

  TStringBigSetKVService_bsGetSliceFromItemR_args(const TStringBigSetKVService_bsGetSliceFromItemR_args&);
  TStringBigSetKVService_bsGetSliceFromItemR_args& operator=(const TStringBigSetKVService_bsGetSliceFromItemR_args&);
  TStringBigSetKVService_bsGetSliceFromItemR_args() : bsName(), fromKey(), count(0) {
  }

  virtual ~TStringBigSetKVService_bsGetSliceFromItemR_args() throw();
  TStringKey bsName;
  TItemKey fromKey;
  int32_t count;

  _TStringBigSetKVService_bsGetSliceFromItemR_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const TStringBigSetKVService_bsGetSliceFromItemR_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceFromItemR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceFromItemR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsGetSliceFromItemR_pargs {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceFromItemR_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItemR_result__isset {
  _TStringBigSetKVService_bsGetSliceFromItemR_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceFromItemR_result__isset;

class TStringBigSetKVService_bsGetSliceFromItemR_result {
 public:

  TStringBigSetKVService_bsGetSliceFromItemR_result(const TStringBigSetKVService_bsGetSliceFromItemR_result&);
  TStringBigSetKVService_bsGetSliceFromItemR_result& operator=(const TStringBigSetKVService_bsGetSliceFromItemR_result&);
  TStringBigSetKVService_bsGetSliceFromItemR_result() {
  }

  virtual ~TStringBigSetKVService_bsGetSliceFromItemR_result() throw();
  TItemSetResult success;

  _TStringBigSetKVService_bsGetSliceFromItemR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TStringBigSetKVService_bsGetSliceFromItemR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsGetSliceFromItemR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsGetSliceFromItemR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsGetSliceFromItemR_presult__isset {
  _TStringBigSetKVService_bsGetSliceFromItemR_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsGetSliceFromItemR_presult__isset;

class TStringBigSetKVService_bsGetSliceFromItemR_presult {
 public:


  virtual ~TStringBigSetKVService_bsGetSliceFromItemR_presult() throw();
  TItemSetResult* success;

  _TStringBigSetKVService_bsGetSliceFromItemR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsRangeQuery_args__isset {
  _TStringBigSetKVService_bsRangeQuery_args__isset() : bsName(false), startKey(false), endKey(false) {}
  bool bsName :1;
  bool startKey :1;
  bool endKey :1;
} _TStringBigSetKVService_bsRangeQuery_args__isset;

class TStringBigSetKVService_bsRangeQuery_args {
 public:

  TStringBigSetKVService_bsRangeQuery_args(const TStringBigSetKVService_bsRangeQuery_args&);
  TStringBigSetKVService_bsRangeQuery_args& operator=(const TStringBigSetKVService_bsRangeQuery_args&);
  TStringBigSetKVService_bsRangeQuery_args() : bsName(), startKey(), endKey() {
  }

  virtual ~TStringBigSetKVService_bsRangeQuery_args() throw();
  TStringKey bsName;
  TItemKey startKey;
  TItemKey endKey;

  _TStringBigSetKVService_bsRangeQuery_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_startKey(const TItemKey& val);

  void __set_endKey(const TItemKey& val);

  bool operator == (const TStringBigSetKVService_bsRangeQuery_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(startKey == rhs.startKey))
      return false;
    if (!(endKey == rhs.endKey))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsRangeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsRangeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsRangeQuery_pargs {
 public:


  virtual ~TStringBigSetKVService_bsRangeQuery_pargs() throw();
  const TStringKey* bsName;
  const TItemKey* startKey;
  const TItemKey* endKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsRangeQuery_result__isset {
  _TStringBigSetKVService_bsRangeQuery_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsRangeQuery_result__isset;

class TStringBigSetKVService_bsRangeQuery_result {
 public:

  TStringBigSetKVService_bsRangeQuery_result(const TStringBigSetKVService_bsRangeQuery_result&);
  TStringBigSetKVService_bsRangeQuery_result& operator=(const TStringBigSetKVService_bsRangeQuery_result&);
  TStringBigSetKVService_bsRangeQuery_result() {
  }

  virtual ~TStringBigSetKVService_bsRangeQuery_result() throw();
  TItemSetResult success;

  _TStringBigSetKVService_bsRangeQuery_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TStringBigSetKVService_bsRangeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsRangeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsRangeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsRangeQuery_presult__isset {
  _TStringBigSetKVService_bsRangeQuery_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsRangeQuery_presult__isset;

class TStringBigSetKVService_bsRangeQuery_presult {
 public:


  virtual ~TStringBigSetKVService_bsRangeQuery_presult() throw();
  TItemSetResult* success;

  _TStringBigSetKVService_bsRangeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_bsMultiPut_args__isset {
  _TStringBigSetKVService_bsMultiPut_args__isset() : bsName(false), setData(false), getAddedItems(false), getReplacedItems(false) {}
  bool bsName :1;
  bool setData :1;
  bool getAddedItems :1;
  bool getReplacedItems :1;
} _TStringBigSetKVService_bsMultiPut_args__isset;

class TStringBigSetKVService_bsMultiPut_args {
 public:

  TStringBigSetKVService_bsMultiPut_args(const TStringBigSetKVService_bsMultiPut_args&);
  TStringBigSetKVService_bsMultiPut_args& operator=(const TStringBigSetKVService_bsMultiPut_args&);
  TStringBigSetKVService_bsMultiPut_args() : bsName(), getAddedItems(0), getReplacedItems(0) {
  }

  virtual ~TStringBigSetKVService_bsMultiPut_args() throw();
  TStringKey bsName;
  TItemSet setData;
  bool getAddedItems;
  bool getReplacedItems;

  _TStringBigSetKVService_bsMultiPut_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  void __set_setData(const TItemSet& val);

  void __set_getAddedItems(const bool val);

  void __set_getReplacedItems(const bool val);

  bool operator == (const TStringBigSetKVService_bsMultiPut_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    if (!(setData == rhs.setData))
      return false;
    if (!(getAddedItems == rhs.getAddedItems))
      return false;
    if (!(getReplacedItems == rhs.getReplacedItems))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsMultiPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsMultiPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_bsMultiPut_pargs {
 public:


  virtual ~TStringBigSetKVService_bsMultiPut_pargs() throw();
  const TStringKey* bsName;
  const TItemSet* setData;
  const bool* getAddedItems;
  const bool* getReplacedItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsMultiPut_result__isset {
  _TStringBigSetKVService_bsMultiPut_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsMultiPut_result__isset;

class TStringBigSetKVService_bsMultiPut_result {
 public:

  TStringBigSetKVService_bsMultiPut_result(const TStringBigSetKVService_bsMultiPut_result&);
  TStringBigSetKVService_bsMultiPut_result& operator=(const TStringBigSetKVService_bsMultiPut_result&);
  TStringBigSetKVService_bsMultiPut_result() {
  }

  virtual ~TStringBigSetKVService_bsMultiPut_result() throw();
  TMultiPutItemResult success;

  _TStringBigSetKVService_bsMultiPut_result__isset __isset;

  void __set_success(const TMultiPutItemResult& val);

  bool operator == (const TStringBigSetKVService_bsMultiPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_bsMultiPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_bsMultiPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_bsMultiPut_presult__isset {
  _TStringBigSetKVService_bsMultiPut_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_bsMultiPut_presult__isset;

class TStringBigSetKVService_bsMultiPut_presult {
 public:


  virtual ~TStringBigSetKVService_bsMultiPut_presult() throw();
  TMultiPutItemResult* success;

  _TStringBigSetKVService_bsMultiPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_getTotalCount_args__isset {
  _TStringBigSetKVService_getTotalCount_args__isset() : bsName(false) {}
  bool bsName :1;
} _TStringBigSetKVService_getTotalCount_args__isset;

class TStringBigSetKVService_getTotalCount_args {
 public:

  TStringBigSetKVService_getTotalCount_args(const TStringBigSetKVService_getTotalCount_args&);
  TStringBigSetKVService_getTotalCount_args& operator=(const TStringBigSetKVService_getTotalCount_args&);
  TStringBigSetKVService_getTotalCount_args() : bsName() {
  }

  virtual ~TStringBigSetKVService_getTotalCount_args() throw();
  TStringKey bsName;

  _TStringBigSetKVService_getTotalCount_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  bool operator == (const TStringBigSetKVService_getTotalCount_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_getTotalCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_getTotalCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_getTotalCount_pargs {
 public:


  virtual ~TStringBigSetKVService_getTotalCount_pargs() throw();
  const TStringKey* bsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_getTotalCount_result__isset {
  _TStringBigSetKVService_getTotalCount_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_getTotalCount_result__isset;

class TStringBigSetKVService_getTotalCount_result {
 public:

  TStringBigSetKVService_getTotalCount_result(const TStringBigSetKVService_getTotalCount_result&);
  TStringBigSetKVService_getTotalCount_result& operator=(const TStringBigSetKVService_getTotalCount_result&);
  TStringBigSetKVService_getTotalCount_result() : success(0) {
  }

  virtual ~TStringBigSetKVService_getTotalCount_result() throw();
  int64_t success;

  _TStringBigSetKVService_getTotalCount_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TStringBigSetKVService_getTotalCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_getTotalCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_getTotalCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_getTotalCount_presult__isset {
  _TStringBigSetKVService_getTotalCount_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_getTotalCount_presult__isset;

class TStringBigSetKVService_getTotalCount_presult {
 public:


  virtual ~TStringBigSetKVService_getTotalCount_presult() throw();
  int64_t* success;

  _TStringBigSetKVService_getTotalCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TStringBigSetKVService_removeAll_args__isset {
  _TStringBigSetKVService_removeAll_args__isset() : bsName(false) {}
  bool bsName :1;
} _TStringBigSetKVService_removeAll_args__isset;

class TStringBigSetKVService_removeAll_args {
 public:

  TStringBigSetKVService_removeAll_args(const TStringBigSetKVService_removeAll_args&);
  TStringBigSetKVService_removeAll_args& operator=(const TStringBigSetKVService_removeAll_args&);
  TStringBigSetKVService_removeAll_args() : bsName() {
  }

  virtual ~TStringBigSetKVService_removeAll_args() throw();
  TStringKey bsName;

  _TStringBigSetKVService_removeAll_args__isset __isset;

  void __set_bsName(const TStringKey& val);

  bool operator == (const TStringBigSetKVService_removeAll_args & rhs) const
  {
    if (!(bsName == rhs.bsName))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_removeAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_removeAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TStringBigSetKVService_removeAll_pargs {
 public:


  virtual ~TStringBigSetKVService_removeAll_pargs() throw();
  const TStringKey* bsName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_removeAll_result__isset {
  _TStringBigSetKVService_removeAll_result__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_removeAll_result__isset;

class TStringBigSetKVService_removeAll_result {
 public:

  TStringBigSetKVService_removeAll_result(const TStringBigSetKVService_removeAll_result&);
  TStringBigSetKVService_removeAll_result& operator=(const TStringBigSetKVService_removeAll_result&);
  TStringBigSetKVService_removeAll_result() : success(0) {
  }

  virtual ~TStringBigSetKVService_removeAll_result() throw();
  int64_t success;

  _TStringBigSetKVService_removeAll_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TStringBigSetKVService_removeAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TStringBigSetKVService_removeAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TStringBigSetKVService_removeAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TStringBigSetKVService_removeAll_presult__isset {
  _TStringBigSetKVService_removeAll_presult__isset() : success(false) {}
  bool success :1;
} _TStringBigSetKVService_removeAll_presult__isset;

class TStringBigSetKVService_removeAll_presult {
 public:


  virtual ~TStringBigSetKVService_removeAll_presult() throw();
  int64_t* success;

  _TStringBigSetKVService_removeAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TStringBigSetKVServiceClient : virtual public TStringBigSetKVServiceIf {
 public:
  TStringBigSetKVServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TStringBigSetKVServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void bsPutItem(TPutItemResult& _return, const TStringKey& bsName, const TItem& item);
  void send_bsPutItem(const TStringKey& bsName, const TItem& item);
  void recv_bsPutItem(TPutItemResult& _return);
  bool bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey);
  void send_bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey);
  bool recv_bsRemoveItem();
  void bsExisted(TExistedResult& _return, const TStringKey& bsName, const TItemKey& itemKey);
  void send_bsExisted(const TStringKey& bsName, const TItemKey& itemKey);
  void recv_bsExisted(TExistedResult& _return);
  void bsGetItem(TItemResult& _return, const TStringKey& bsName, const TItemKey& itemKey);
  void send_bsGetItem(const TStringKey& bsName, const TItemKey& itemKey);
  void recv_bsGetItem(TItemResult& _return);
  void bsGetSlice(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void send_bsGetSlice(const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void recv_bsGetSlice(TItemSetResult& _return);
  void bsGetSliceFromItem(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void send_bsGetSliceFromItem(const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void recv_bsGetSliceFromItem(TItemSetResult& _return);
  void bsGetSliceR(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void send_bsGetSliceR(const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void recv_bsGetSliceR(TItemSetResult& _return);
  void bsGetSliceFromItemR(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void send_bsGetSliceFromItemR(const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void recv_bsGetSliceFromItemR(TItemSetResult& _return);
  void bsRangeQuery(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey);
  void send_bsRangeQuery(const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey);
  void recv_bsRangeQuery(TItemSetResult& _return);
  void bsMultiPut(TMultiPutItemResult& _return, const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void send_bsMultiPut(const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_bsMultiPut(TMultiPutItemResult& _return);
  int64_t getTotalCount(const TStringKey& bsName);
  void send_getTotalCount(const TStringKey& bsName);
  int64_t recv_getTotalCount();
  int64_t removeAll(const TStringKey& bsName);
  void send_removeAll(const TStringKey& bsName);
  int64_t recv_removeAll();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TStringBigSetKVServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TStringBigSetKVServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_bsPutItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsRemoveItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsExisted(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsGetItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsGetSlice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsGetSliceFromItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsGetSliceR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsGetSliceFromItemR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsRangeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bsMultiPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TStringBigSetKVServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> iface) :
    iface_(iface) {
    processMap_["bsPutItem"] = &TStringBigSetKVServiceProcessor::process_bsPutItem;
    processMap_["bsRemoveItem"] = &TStringBigSetKVServiceProcessor::process_bsRemoveItem;
    processMap_["bsExisted"] = &TStringBigSetKVServiceProcessor::process_bsExisted;
    processMap_["bsGetItem"] = &TStringBigSetKVServiceProcessor::process_bsGetItem;
    processMap_["bsGetSlice"] = &TStringBigSetKVServiceProcessor::process_bsGetSlice;
    processMap_["bsGetSliceFromItem"] = &TStringBigSetKVServiceProcessor::process_bsGetSliceFromItem;
    processMap_["bsGetSliceR"] = &TStringBigSetKVServiceProcessor::process_bsGetSliceR;
    processMap_["bsGetSliceFromItemR"] = &TStringBigSetKVServiceProcessor::process_bsGetSliceFromItemR;
    processMap_["bsRangeQuery"] = &TStringBigSetKVServiceProcessor::process_bsRangeQuery;
    processMap_["bsMultiPut"] = &TStringBigSetKVServiceProcessor::process_bsMultiPut;
    processMap_["getTotalCount"] = &TStringBigSetKVServiceProcessor::process_getTotalCount;
    processMap_["removeAll"] = &TStringBigSetKVServiceProcessor::process_removeAll;
  }

  virtual ~TStringBigSetKVServiceProcessor() {}
};

class TStringBigSetKVServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TStringBigSetKVServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TStringBigSetKVServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TStringBigSetKVServiceIfFactory > handlerFactory_;
};

class TStringBigSetKVServiceMultiface : virtual public TStringBigSetKVServiceIf {
 public:
  TStringBigSetKVServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TStringBigSetKVServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> > ifaces_;
  TStringBigSetKVServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TStringBigSetKVServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void bsPutItem(TPutItemResult& _return, const TStringKey& bsName, const TItem& item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsPutItem(_return, bsName, item);
    }
    ifaces_[i]->bsPutItem(_return, bsName, item);
    return;
  }

  bool bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsRemoveItem(bsName, itemKey);
    }
    return ifaces_[i]->bsRemoveItem(bsName, itemKey);
  }

  void bsExisted(TExistedResult& _return, const TStringKey& bsName, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsExisted(_return, bsName, itemKey);
    }
    ifaces_[i]->bsExisted(_return, bsName, itemKey);
    return;
  }

  void bsGetItem(TItemResult& _return, const TStringKey& bsName, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsGetItem(_return, bsName, itemKey);
    }
    ifaces_[i]->bsGetItem(_return, bsName, itemKey);
    return;
  }

  void bsGetSlice(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsGetSlice(_return, bsName, fromPos, count);
    }
    ifaces_[i]->bsGetSlice(_return, bsName, fromPos, count);
    return;
  }

  void bsGetSliceFromItem(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsGetSliceFromItem(_return, bsName, fromKey, count);
    }
    ifaces_[i]->bsGetSliceFromItem(_return, bsName, fromKey, count);
    return;
  }

  void bsGetSliceR(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsGetSliceR(_return, bsName, fromPos, count);
    }
    ifaces_[i]->bsGetSliceR(_return, bsName, fromPos, count);
    return;
  }

  void bsGetSliceFromItemR(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsGetSliceFromItemR(_return, bsName, fromKey, count);
    }
    ifaces_[i]->bsGetSliceFromItemR(_return, bsName, fromKey, count);
    return;
  }

  void bsRangeQuery(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsRangeQuery(_return, bsName, startKey, endKey);
    }
    ifaces_[i]->bsRangeQuery(_return, bsName, startKey, endKey);
    return;
  }

  void bsMultiPut(TMultiPutItemResult& _return, const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bsMultiPut(_return, bsName, setData, getAddedItems, getReplacedItems);
    }
    ifaces_[i]->bsMultiPut(_return, bsName, setData, getAddedItems, getReplacedItems);
    return;
  }

  int64_t getTotalCount(const TStringKey& bsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalCount(bsName);
    }
    return ifaces_[i]->getTotalCount(bsName);
  }

  int64_t removeAll(const TStringKey& bsName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeAll(bsName);
    }
    return ifaces_[i]->removeAll(bsName);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TStringBigSetKVServiceConcurrentClient : virtual public TStringBigSetKVServiceIf {
 public:
  TStringBigSetKVServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TStringBigSetKVServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void bsPutItem(TPutItemResult& _return, const TStringKey& bsName, const TItem& item);
  int32_t send_bsPutItem(const TStringKey& bsName, const TItem& item);
  void recv_bsPutItem(TPutItemResult& _return, const int32_t seqid);
  bool bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey);
  int32_t send_bsRemoveItem(const TStringKey& bsName, const TItemKey& itemKey);
  bool recv_bsRemoveItem(const int32_t seqid);
  void bsExisted(TExistedResult& _return, const TStringKey& bsName, const TItemKey& itemKey);
  int32_t send_bsExisted(const TStringKey& bsName, const TItemKey& itemKey);
  void recv_bsExisted(TExistedResult& _return, const int32_t seqid);
  void bsGetItem(TItemResult& _return, const TStringKey& bsName, const TItemKey& itemKey);
  int32_t send_bsGetItem(const TStringKey& bsName, const TItemKey& itemKey);
  void recv_bsGetItem(TItemResult& _return, const int32_t seqid);
  void bsGetSlice(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  int32_t send_bsGetSlice(const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void recv_bsGetSlice(TItemSetResult& _return, const int32_t seqid);
  void bsGetSliceFromItem(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  int32_t send_bsGetSliceFromItem(const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void recv_bsGetSliceFromItem(TItemSetResult& _return, const int32_t seqid);
  void bsGetSliceR(TItemSetResult& _return, const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  int32_t send_bsGetSliceR(const TStringKey& bsName, const int32_t fromPos, const int32_t count);
  void recv_bsGetSliceR(TItemSetResult& _return, const int32_t seqid);
  void bsGetSliceFromItemR(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  int32_t send_bsGetSliceFromItemR(const TStringKey& bsName, const TItemKey& fromKey, const int32_t count);
  void recv_bsGetSliceFromItemR(TItemSetResult& _return, const int32_t seqid);
  void bsRangeQuery(TItemSetResult& _return, const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey);
  int32_t send_bsRangeQuery(const TStringKey& bsName, const TItemKey& startKey, const TItemKey& endKey);
  void recv_bsRangeQuery(TItemSetResult& _return, const int32_t seqid);
  void bsMultiPut(TMultiPutItemResult& _return, const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  int32_t send_bsMultiPut(const TStringKey& bsName, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_bsMultiPut(TMultiPutItemResult& _return, const int32_t seqid);
  int64_t getTotalCount(const TStringKey& bsName);
  int32_t send_getTotalCount(const TStringKey& bsName);
  int64_t recv_getTotalCount(const int32_t seqid);
  int64_t removeAll(const TStringKey& bsName);
  int32_t send_removeAll(const TStringKey& bsName);
  int64_t recv_removeAll(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
