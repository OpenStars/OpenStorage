/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TIBSDataService_H
#define TIBSDataService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "bskv_types.h"

namespace bskv {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TIBSDataServiceIf {
 public:
  virtual ~TIBSDataServiceIf() {}
  virtual void putItem(TPutItemResult& _return, const TKey bigsetID, const TItem& item) = 0;
  virtual bool removeItem(const TKey bigsetID, const TItemKey& itemKey) = 0;
  virtual void existed(TExistedResult& _return, const TKey bigsetID, const TItemKey& itemKey) = 0;
  virtual void getItem(TItemResult& _return, const TKey bigsetID, const TItemKey& itemKey) = 0;
  virtual void getSlice(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count) = 0;
  virtual void getSliceFromItem(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void getSliceR(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count) = 0;
  virtual void getSliceFromItemR(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count) = 0;
  virtual void rangeQuery(TItemSetResult& _return, const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey) = 0;
  virtual void multiPut(TMultiPutItemResult& _return, const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) = 0;
  virtual int64_t getTotalCount(const TKey bigsetID) = 0;
  virtual int64_t removeAll(const TKey bigsetID) = 0;
};

class TIBSDataServiceIfFactory {
 public:
  typedef TIBSDataServiceIf Handler;

  virtual ~TIBSDataServiceIfFactory() {}

  virtual TIBSDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TIBSDataServiceIf* /* handler */) = 0;
};

class TIBSDataServiceIfSingletonFactory : virtual public TIBSDataServiceIfFactory {
 public:
  TIBSDataServiceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf>& iface) : iface_(iface) {}
  virtual ~TIBSDataServiceIfSingletonFactory() {}

  virtual TIBSDataServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TIBSDataServiceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> iface_;
};

class TIBSDataServiceNull : virtual public TIBSDataServiceIf {
 public:
  virtual ~TIBSDataServiceNull() {}
  void putItem(TPutItemResult& /* _return */, const TKey /* bigsetID */, const TItem& /* item */) {
    return;
  }
  bool removeItem(const TKey /* bigsetID */, const TItemKey& /* itemKey */) {
    bool _return = false;
    return _return;
  }
  void existed(TExistedResult& /* _return */, const TKey /* bigsetID */, const TItemKey& /* itemKey */) {
    return;
  }
  void getItem(TItemResult& /* _return */, const TKey /* bigsetID */, const TItemKey& /* itemKey */) {
    return;
  }
  void getSlice(TItemSetResult& /* _return */, const TKey /* bigsetID */, const int32_t /* fromPos */, const int32_t /* count */) {
    return;
  }
  void getSliceFromItem(TItemSetResult& /* _return */, const TKey /* bigsetID */, const TItemKey& /* fromKey */, const int32_t /* count */) {
    return;
  }
  void getSliceR(TItemSetResult& /* _return */, const TKey /* bigsetID */, const int32_t /* fromPos */, const int32_t /* count */) {
    return;
  }
  void getSliceFromItemR(TItemSetResult& /* _return */, const TKey /* bigsetID */, const TItemKey& /* fromKey */, const int32_t /* count */) {
    return;
  }
  void rangeQuery(TItemSetResult& /* _return */, const TKey /* bigsetID */, const TItemKey& /* startKey */, const TItemKey& /* endKey */) {
    return;
  }
  void multiPut(TMultiPutItemResult& /* _return */, const TKey /* bigsetID */, const TItemSet& /* setData */, const bool /* getAddedItems */, const bool /* getReplacedItems */) {
    return;
  }
  int64_t getTotalCount(const TKey /* bigsetID */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t removeAll(const TKey /* bigsetID */) {
    int64_t _return = 0;
    return _return;
  }
};

typedef struct _TIBSDataService_putItem_args__isset {
  _TIBSDataService_putItem_args__isset() : bigsetID(false), item(false) {}
  bool bigsetID :1;
  bool item :1;
} _TIBSDataService_putItem_args__isset;

class TIBSDataService_putItem_args {
 public:

  TIBSDataService_putItem_args(const TIBSDataService_putItem_args&);
  TIBSDataService_putItem_args& operator=(const TIBSDataService_putItem_args&);
  TIBSDataService_putItem_args() : bigsetID(0) {
  }

  virtual ~TIBSDataService_putItem_args() throw();
  TKey bigsetID;
  TItem item;

  _TIBSDataService_putItem_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_item(const TItem& val);

  bool operator == (const TIBSDataService_putItem_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(item == rhs.item))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_putItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_putItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_putItem_pargs {
 public:


  virtual ~TIBSDataService_putItem_pargs() throw();
  const TKey* bigsetID;
  const TItem* item;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_putItem_result__isset {
  _TIBSDataService_putItem_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_putItem_result__isset;

class TIBSDataService_putItem_result {
 public:

  TIBSDataService_putItem_result(const TIBSDataService_putItem_result&);
  TIBSDataService_putItem_result& operator=(const TIBSDataService_putItem_result&);
  TIBSDataService_putItem_result() {
  }

  virtual ~TIBSDataService_putItem_result() throw();
  TPutItemResult success;

  _TIBSDataService_putItem_result__isset __isset;

  void __set_success(const TPutItemResult& val);

  bool operator == (const TIBSDataService_putItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_putItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_putItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_putItem_presult__isset {
  _TIBSDataService_putItem_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_putItem_presult__isset;

class TIBSDataService_putItem_presult {
 public:


  virtual ~TIBSDataService_putItem_presult() throw();
  TPutItemResult* success;

  _TIBSDataService_putItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_removeItem_args__isset {
  _TIBSDataService_removeItem_args__isset() : bigsetID(false), itemKey(false) {}
  bool bigsetID :1;
  bool itemKey :1;
} _TIBSDataService_removeItem_args__isset;

class TIBSDataService_removeItem_args {
 public:

  TIBSDataService_removeItem_args(const TIBSDataService_removeItem_args&);
  TIBSDataService_removeItem_args& operator=(const TIBSDataService_removeItem_args&);
  TIBSDataService_removeItem_args() : bigsetID(0), itemKey() {
  }

  virtual ~TIBSDataService_removeItem_args() throw();
  TKey bigsetID;
  TItemKey itemKey;

  _TIBSDataService_removeItem_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TIBSDataService_removeItem_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_removeItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_removeItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_removeItem_pargs {
 public:


  virtual ~TIBSDataService_removeItem_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_removeItem_result__isset {
  _TIBSDataService_removeItem_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_removeItem_result__isset;

class TIBSDataService_removeItem_result {
 public:

  TIBSDataService_removeItem_result(const TIBSDataService_removeItem_result&);
  TIBSDataService_removeItem_result& operator=(const TIBSDataService_removeItem_result&);
  TIBSDataService_removeItem_result() : success(0) {
  }

  virtual ~TIBSDataService_removeItem_result() throw();
  bool success;

  _TIBSDataService_removeItem_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const TIBSDataService_removeItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_removeItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_removeItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_removeItem_presult__isset {
  _TIBSDataService_removeItem_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_removeItem_presult__isset;

class TIBSDataService_removeItem_presult {
 public:


  virtual ~TIBSDataService_removeItem_presult() throw();
  bool* success;

  _TIBSDataService_removeItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_existed_args__isset {
  _TIBSDataService_existed_args__isset() : bigsetID(false), itemKey(false) {}
  bool bigsetID :1;
  bool itemKey :1;
} _TIBSDataService_existed_args__isset;

class TIBSDataService_existed_args {
 public:

  TIBSDataService_existed_args(const TIBSDataService_existed_args&);
  TIBSDataService_existed_args& operator=(const TIBSDataService_existed_args&);
  TIBSDataService_existed_args() : bigsetID(0), itemKey() {
  }

  virtual ~TIBSDataService_existed_args() throw();
  TKey bigsetID;
  TItemKey itemKey;

  _TIBSDataService_existed_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TIBSDataService_existed_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_existed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_existed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_existed_pargs {
 public:


  virtual ~TIBSDataService_existed_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_existed_result__isset {
  _TIBSDataService_existed_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_existed_result__isset;

class TIBSDataService_existed_result {
 public:

  TIBSDataService_existed_result(const TIBSDataService_existed_result&);
  TIBSDataService_existed_result& operator=(const TIBSDataService_existed_result&);
  TIBSDataService_existed_result() {
  }

  virtual ~TIBSDataService_existed_result() throw();
  TExistedResult success;

  _TIBSDataService_existed_result__isset __isset;

  void __set_success(const TExistedResult& val);

  bool operator == (const TIBSDataService_existed_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_existed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_existed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_existed_presult__isset {
  _TIBSDataService_existed_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_existed_presult__isset;

class TIBSDataService_existed_presult {
 public:


  virtual ~TIBSDataService_existed_presult() throw();
  TExistedResult* success;

  _TIBSDataService_existed_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getItem_args__isset {
  _TIBSDataService_getItem_args__isset() : bigsetID(false), itemKey(false) {}
  bool bigsetID :1;
  bool itemKey :1;
} _TIBSDataService_getItem_args__isset;

class TIBSDataService_getItem_args {
 public:

  TIBSDataService_getItem_args(const TIBSDataService_getItem_args&);
  TIBSDataService_getItem_args& operator=(const TIBSDataService_getItem_args&);
  TIBSDataService_getItem_args() : bigsetID(0), itemKey() {
  }

  virtual ~TIBSDataService_getItem_args() throw();
  TKey bigsetID;
  TItemKey itemKey;

  _TIBSDataService_getItem_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_itemKey(const TItemKey& val);

  bool operator == (const TIBSDataService_getItem_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(itemKey == rhs.itemKey))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getItem_pargs {
 public:


  virtual ~TIBSDataService_getItem_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* itemKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getItem_result__isset {
  _TIBSDataService_getItem_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getItem_result__isset;

class TIBSDataService_getItem_result {
 public:

  TIBSDataService_getItem_result(const TIBSDataService_getItem_result&);
  TIBSDataService_getItem_result& operator=(const TIBSDataService_getItem_result&);
  TIBSDataService_getItem_result() {
  }

  virtual ~TIBSDataService_getItem_result() throw();
  TItemResult success;

  _TIBSDataService_getItem_result__isset __isset;

  void __set_success(const TItemResult& val);

  bool operator == (const TIBSDataService_getItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getItem_presult__isset {
  _TIBSDataService_getItem_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getItem_presult__isset;

class TIBSDataService_getItem_presult {
 public:


  virtual ~TIBSDataService_getItem_presult() throw();
  TItemResult* success;

  _TIBSDataService_getItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getSlice_args__isset {
  _TIBSDataService_getSlice_args__isset() : bigsetID(false), fromPos(false), count(false) {}
  bool bigsetID :1;
  bool fromPos :1;
  bool count :1;
} _TIBSDataService_getSlice_args__isset;

class TIBSDataService_getSlice_args {
 public:

  TIBSDataService_getSlice_args(const TIBSDataService_getSlice_args&);
  TIBSDataService_getSlice_args& operator=(const TIBSDataService_getSlice_args&);
  TIBSDataService_getSlice_args() : bigsetID(0), fromPos(0), count(0) {
  }

  virtual ~TIBSDataService_getSlice_args() throw();
  TKey bigsetID;
  int32_t fromPos;
  int32_t count;

  _TIBSDataService_getSlice_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_fromPos(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const TIBSDataService_getSlice_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(fromPos == rhs.fromPos))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSlice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSlice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getSlice_pargs {
 public:


  virtual ~TIBSDataService_getSlice_pargs() throw();
  const TKey* bigsetID;
  const int32_t* fromPos;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSlice_result__isset {
  _TIBSDataService_getSlice_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSlice_result__isset;

class TIBSDataService_getSlice_result {
 public:

  TIBSDataService_getSlice_result(const TIBSDataService_getSlice_result&);
  TIBSDataService_getSlice_result& operator=(const TIBSDataService_getSlice_result&);
  TIBSDataService_getSlice_result() {
  }

  virtual ~TIBSDataService_getSlice_result() throw();
  TItemSetResult success;

  _TIBSDataService_getSlice_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TIBSDataService_getSlice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSlice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSlice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSlice_presult__isset {
  _TIBSDataService_getSlice_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSlice_presult__isset;

class TIBSDataService_getSlice_presult {
 public:


  virtual ~TIBSDataService_getSlice_presult() throw();
  TItemSetResult* success;

  _TIBSDataService_getSlice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getSliceFromItem_args__isset {
  _TIBSDataService_getSliceFromItem_args__isset() : bigsetID(false), fromKey(false), count(false) {}
  bool bigsetID :1;
  bool fromKey :1;
  bool count :1;
} _TIBSDataService_getSliceFromItem_args__isset;

class TIBSDataService_getSliceFromItem_args {
 public:

  TIBSDataService_getSliceFromItem_args(const TIBSDataService_getSliceFromItem_args&);
  TIBSDataService_getSliceFromItem_args& operator=(const TIBSDataService_getSliceFromItem_args&);
  TIBSDataService_getSliceFromItem_args() : bigsetID(0), fromKey(), count(0) {
  }

  virtual ~TIBSDataService_getSliceFromItem_args() throw();
  TKey bigsetID;
  TItemKey fromKey;
  int32_t count;

  _TIBSDataService_getSliceFromItem_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const TIBSDataService_getSliceFromItem_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceFromItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceFromItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getSliceFromItem_pargs {
 public:


  virtual ~TIBSDataService_getSliceFromItem_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceFromItem_result__isset {
  _TIBSDataService_getSliceFromItem_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceFromItem_result__isset;

class TIBSDataService_getSliceFromItem_result {
 public:

  TIBSDataService_getSliceFromItem_result(const TIBSDataService_getSliceFromItem_result&);
  TIBSDataService_getSliceFromItem_result& operator=(const TIBSDataService_getSliceFromItem_result&);
  TIBSDataService_getSliceFromItem_result() {
  }

  virtual ~TIBSDataService_getSliceFromItem_result() throw();
  TItemSetResult success;

  _TIBSDataService_getSliceFromItem_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TIBSDataService_getSliceFromItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceFromItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceFromItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceFromItem_presult__isset {
  _TIBSDataService_getSliceFromItem_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceFromItem_presult__isset;

class TIBSDataService_getSliceFromItem_presult {
 public:


  virtual ~TIBSDataService_getSliceFromItem_presult() throw();
  TItemSetResult* success;

  _TIBSDataService_getSliceFromItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getSliceR_args__isset {
  _TIBSDataService_getSliceR_args__isset() : bigsetID(false), fromPos(false), count(false) {}
  bool bigsetID :1;
  bool fromPos :1;
  bool count :1;
} _TIBSDataService_getSliceR_args__isset;

class TIBSDataService_getSliceR_args {
 public:

  TIBSDataService_getSliceR_args(const TIBSDataService_getSliceR_args&);
  TIBSDataService_getSliceR_args& operator=(const TIBSDataService_getSliceR_args&);
  TIBSDataService_getSliceR_args() : bigsetID(0), fromPos(0), count(0) {
  }

  virtual ~TIBSDataService_getSliceR_args() throw();
  TKey bigsetID;
  int32_t fromPos;
  int32_t count;

  _TIBSDataService_getSliceR_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_fromPos(const int32_t val);

  void __set_count(const int32_t val);

  bool operator == (const TIBSDataService_getSliceR_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(fromPos == rhs.fromPos))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getSliceR_pargs {
 public:


  virtual ~TIBSDataService_getSliceR_pargs() throw();
  const TKey* bigsetID;
  const int32_t* fromPos;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceR_result__isset {
  _TIBSDataService_getSliceR_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceR_result__isset;

class TIBSDataService_getSliceR_result {
 public:

  TIBSDataService_getSliceR_result(const TIBSDataService_getSliceR_result&);
  TIBSDataService_getSliceR_result& operator=(const TIBSDataService_getSliceR_result&);
  TIBSDataService_getSliceR_result() {
  }

  virtual ~TIBSDataService_getSliceR_result() throw();
  TItemSetResult success;

  _TIBSDataService_getSliceR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TIBSDataService_getSliceR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceR_presult__isset {
  _TIBSDataService_getSliceR_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceR_presult__isset;

class TIBSDataService_getSliceR_presult {
 public:


  virtual ~TIBSDataService_getSliceR_presult() throw();
  TItemSetResult* success;

  _TIBSDataService_getSliceR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getSliceFromItemR_args__isset {
  _TIBSDataService_getSliceFromItemR_args__isset() : bigsetID(false), fromKey(false), count(false) {}
  bool bigsetID :1;
  bool fromKey :1;
  bool count :1;
} _TIBSDataService_getSliceFromItemR_args__isset;

class TIBSDataService_getSliceFromItemR_args {
 public:

  TIBSDataService_getSliceFromItemR_args(const TIBSDataService_getSliceFromItemR_args&);
  TIBSDataService_getSliceFromItemR_args& operator=(const TIBSDataService_getSliceFromItemR_args&);
  TIBSDataService_getSliceFromItemR_args() : bigsetID(0), fromKey(), count(0) {
  }

  virtual ~TIBSDataService_getSliceFromItemR_args() throw();
  TKey bigsetID;
  TItemKey fromKey;
  int32_t count;

  _TIBSDataService_getSliceFromItemR_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_fromKey(const TItemKey& val);

  void __set_count(const int32_t val);

  bool operator == (const TIBSDataService_getSliceFromItemR_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(fromKey == rhs.fromKey))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceFromItemR_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceFromItemR_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getSliceFromItemR_pargs {
 public:


  virtual ~TIBSDataService_getSliceFromItemR_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* fromKey;
  const int32_t* count;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceFromItemR_result__isset {
  _TIBSDataService_getSliceFromItemR_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceFromItemR_result__isset;

class TIBSDataService_getSliceFromItemR_result {
 public:

  TIBSDataService_getSliceFromItemR_result(const TIBSDataService_getSliceFromItemR_result&);
  TIBSDataService_getSliceFromItemR_result& operator=(const TIBSDataService_getSliceFromItemR_result&);
  TIBSDataService_getSliceFromItemR_result() {
  }

  virtual ~TIBSDataService_getSliceFromItemR_result() throw();
  TItemSetResult success;

  _TIBSDataService_getSliceFromItemR_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TIBSDataService_getSliceFromItemR_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getSliceFromItemR_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getSliceFromItemR_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getSliceFromItemR_presult__isset {
  _TIBSDataService_getSliceFromItemR_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getSliceFromItemR_presult__isset;

class TIBSDataService_getSliceFromItemR_presult {
 public:


  virtual ~TIBSDataService_getSliceFromItemR_presult() throw();
  TItemSetResult* success;

  _TIBSDataService_getSliceFromItemR_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_rangeQuery_args__isset {
  _TIBSDataService_rangeQuery_args__isset() : bigsetID(false), startKey(false), endKey(false) {}
  bool bigsetID :1;
  bool startKey :1;
  bool endKey :1;
} _TIBSDataService_rangeQuery_args__isset;

class TIBSDataService_rangeQuery_args {
 public:

  TIBSDataService_rangeQuery_args(const TIBSDataService_rangeQuery_args&);
  TIBSDataService_rangeQuery_args& operator=(const TIBSDataService_rangeQuery_args&);
  TIBSDataService_rangeQuery_args() : bigsetID(0), startKey(), endKey() {
  }

  virtual ~TIBSDataService_rangeQuery_args() throw();
  TKey bigsetID;
  TItemKey startKey;
  TItemKey endKey;

  _TIBSDataService_rangeQuery_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_startKey(const TItemKey& val);

  void __set_endKey(const TItemKey& val);

  bool operator == (const TIBSDataService_rangeQuery_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(startKey == rhs.startKey))
      return false;
    if (!(endKey == rhs.endKey))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_rangeQuery_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_rangeQuery_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_rangeQuery_pargs {
 public:


  virtual ~TIBSDataService_rangeQuery_pargs() throw();
  const TKey* bigsetID;
  const TItemKey* startKey;
  const TItemKey* endKey;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_rangeQuery_result__isset {
  _TIBSDataService_rangeQuery_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_rangeQuery_result__isset;

class TIBSDataService_rangeQuery_result {
 public:

  TIBSDataService_rangeQuery_result(const TIBSDataService_rangeQuery_result&);
  TIBSDataService_rangeQuery_result& operator=(const TIBSDataService_rangeQuery_result&);
  TIBSDataService_rangeQuery_result() {
  }

  virtual ~TIBSDataService_rangeQuery_result() throw();
  TItemSetResult success;

  _TIBSDataService_rangeQuery_result__isset __isset;

  void __set_success(const TItemSetResult& val);

  bool operator == (const TIBSDataService_rangeQuery_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_rangeQuery_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_rangeQuery_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_rangeQuery_presult__isset {
  _TIBSDataService_rangeQuery_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_rangeQuery_presult__isset;

class TIBSDataService_rangeQuery_presult {
 public:


  virtual ~TIBSDataService_rangeQuery_presult() throw();
  TItemSetResult* success;

  _TIBSDataService_rangeQuery_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_multiPut_args__isset {
  _TIBSDataService_multiPut_args__isset() : bigsetID(false), setData(false), getAddedItems(false), getReplacedItems(false) {}
  bool bigsetID :1;
  bool setData :1;
  bool getAddedItems :1;
  bool getReplacedItems :1;
} _TIBSDataService_multiPut_args__isset;

class TIBSDataService_multiPut_args {
 public:

  TIBSDataService_multiPut_args(const TIBSDataService_multiPut_args&);
  TIBSDataService_multiPut_args& operator=(const TIBSDataService_multiPut_args&);
  TIBSDataService_multiPut_args() : bigsetID(0), getAddedItems(0), getReplacedItems(0) {
  }

  virtual ~TIBSDataService_multiPut_args() throw();
  TKey bigsetID;
  TItemSet setData;
  bool getAddedItems;
  bool getReplacedItems;

  _TIBSDataService_multiPut_args__isset __isset;

  void __set_bigsetID(const TKey val);

  void __set_setData(const TItemSet& val);

  void __set_getAddedItems(const bool val);

  void __set_getReplacedItems(const bool val);

  bool operator == (const TIBSDataService_multiPut_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    if (!(setData == rhs.setData))
      return false;
    if (!(getAddedItems == rhs.getAddedItems))
      return false;
    if (!(getReplacedItems == rhs.getReplacedItems))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_multiPut_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_multiPut_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_multiPut_pargs {
 public:


  virtual ~TIBSDataService_multiPut_pargs() throw();
  const TKey* bigsetID;
  const TItemSet* setData;
  const bool* getAddedItems;
  const bool* getReplacedItems;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_multiPut_result__isset {
  _TIBSDataService_multiPut_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_multiPut_result__isset;

class TIBSDataService_multiPut_result {
 public:

  TIBSDataService_multiPut_result(const TIBSDataService_multiPut_result&);
  TIBSDataService_multiPut_result& operator=(const TIBSDataService_multiPut_result&);
  TIBSDataService_multiPut_result() {
  }

  virtual ~TIBSDataService_multiPut_result() throw();
  TMultiPutItemResult success;

  _TIBSDataService_multiPut_result__isset __isset;

  void __set_success(const TMultiPutItemResult& val);

  bool operator == (const TIBSDataService_multiPut_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_multiPut_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_multiPut_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_multiPut_presult__isset {
  _TIBSDataService_multiPut_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_multiPut_presult__isset;

class TIBSDataService_multiPut_presult {
 public:


  virtual ~TIBSDataService_multiPut_presult() throw();
  TMultiPutItemResult* success;

  _TIBSDataService_multiPut_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_getTotalCount_args__isset {
  _TIBSDataService_getTotalCount_args__isset() : bigsetID(false) {}
  bool bigsetID :1;
} _TIBSDataService_getTotalCount_args__isset;

class TIBSDataService_getTotalCount_args {
 public:

  TIBSDataService_getTotalCount_args(const TIBSDataService_getTotalCount_args&);
  TIBSDataService_getTotalCount_args& operator=(const TIBSDataService_getTotalCount_args&);
  TIBSDataService_getTotalCount_args() : bigsetID(0) {
  }

  virtual ~TIBSDataService_getTotalCount_args() throw();
  TKey bigsetID;

  _TIBSDataService_getTotalCount_args__isset __isset;

  void __set_bigsetID(const TKey val);

  bool operator == (const TIBSDataService_getTotalCount_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getTotalCount_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getTotalCount_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_getTotalCount_pargs {
 public:


  virtual ~TIBSDataService_getTotalCount_pargs() throw();
  const TKey* bigsetID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getTotalCount_result__isset {
  _TIBSDataService_getTotalCount_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getTotalCount_result__isset;

class TIBSDataService_getTotalCount_result {
 public:

  TIBSDataService_getTotalCount_result(const TIBSDataService_getTotalCount_result&);
  TIBSDataService_getTotalCount_result& operator=(const TIBSDataService_getTotalCount_result&);
  TIBSDataService_getTotalCount_result() : success(0) {
  }

  virtual ~TIBSDataService_getTotalCount_result() throw();
  int64_t success;

  _TIBSDataService_getTotalCount_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TIBSDataService_getTotalCount_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_getTotalCount_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_getTotalCount_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_getTotalCount_presult__isset {
  _TIBSDataService_getTotalCount_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_getTotalCount_presult__isset;

class TIBSDataService_getTotalCount_presult {
 public:


  virtual ~TIBSDataService_getTotalCount_presult() throw();
  int64_t* success;

  _TIBSDataService_getTotalCount_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _TIBSDataService_removeAll_args__isset {
  _TIBSDataService_removeAll_args__isset() : bigsetID(false) {}
  bool bigsetID :1;
} _TIBSDataService_removeAll_args__isset;

class TIBSDataService_removeAll_args {
 public:

  TIBSDataService_removeAll_args(const TIBSDataService_removeAll_args&);
  TIBSDataService_removeAll_args& operator=(const TIBSDataService_removeAll_args&);
  TIBSDataService_removeAll_args() : bigsetID(0) {
  }

  virtual ~TIBSDataService_removeAll_args() throw();
  TKey bigsetID;

  _TIBSDataService_removeAll_args__isset __isset;

  void __set_bigsetID(const TKey val);

  bool operator == (const TIBSDataService_removeAll_args & rhs) const
  {
    if (!(bigsetID == rhs.bigsetID))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_removeAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_removeAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TIBSDataService_removeAll_pargs {
 public:


  virtual ~TIBSDataService_removeAll_pargs() throw();
  const TKey* bigsetID;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_removeAll_result__isset {
  _TIBSDataService_removeAll_result__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_removeAll_result__isset;

class TIBSDataService_removeAll_result {
 public:

  TIBSDataService_removeAll_result(const TIBSDataService_removeAll_result&);
  TIBSDataService_removeAll_result& operator=(const TIBSDataService_removeAll_result&);
  TIBSDataService_removeAll_result() : success(0) {
  }

  virtual ~TIBSDataService_removeAll_result() throw();
  int64_t success;

  _TIBSDataService_removeAll_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const TIBSDataService_removeAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const TIBSDataService_removeAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TIBSDataService_removeAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _TIBSDataService_removeAll_presult__isset {
  _TIBSDataService_removeAll_presult__isset() : success(false) {}
  bool success :1;
} _TIBSDataService_removeAll_presult__isset;

class TIBSDataService_removeAll_presult {
 public:


  virtual ~TIBSDataService_removeAll_presult() throw();
  int64_t* success;

  _TIBSDataService_removeAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TIBSDataServiceClient : virtual public TIBSDataServiceIf {
 public:
  TIBSDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TIBSDataServiceClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putItem(TPutItemResult& _return, const TKey bigsetID, const TItem& item);
  void send_putItem(const TKey bigsetID, const TItem& item);
  void recv_putItem(TPutItemResult& _return);
  bool removeItem(const TKey bigsetID, const TItemKey& itemKey);
  void send_removeItem(const TKey bigsetID, const TItemKey& itemKey);
  bool recv_removeItem();
  void existed(TExistedResult& _return, const TKey bigsetID, const TItemKey& itemKey);
  void send_existed(const TKey bigsetID, const TItemKey& itemKey);
  void recv_existed(TExistedResult& _return);
  void getItem(TItemResult& _return, const TKey bigsetID, const TItemKey& itemKey);
  void send_getItem(const TKey bigsetID, const TItemKey& itemKey);
  void recv_getItem(TItemResult& _return);
  void getSlice(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void send_getSlice(const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void recv_getSlice(TItemSetResult& _return);
  void getSliceFromItem(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void send_getSliceFromItem(const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void recv_getSliceFromItem(TItemSetResult& _return);
  void getSliceR(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void send_getSliceR(const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void recv_getSliceR(TItemSetResult& _return);
  void getSliceFromItemR(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void send_getSliceFromItemR(const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void recv_getSliceFromItemR(TItemSetResult& _return);
  void rangeQuery(TItemSetResult& _return, const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey);
  void send_rangeQuery(const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey);
  void recv_rangeQuery(TItemSetResult& _return);
  void multiPut(TMultiPutItemResult& _return, const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void send_multiPut(const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_multiPut(TMultiPutItemResult& _return);
  int64_t getTotalCount(const TKey bigsetID);
  void send_getTotalCount(const TKey bigsetID);
  int64_t recv_getTotalCount();
  int64_t removeAll(const TKey bigsetID);
  void send_removeAll(const TKey bigsetID);
  int64_t recv_removeAll();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TIBSDataServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TIBSDataServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_putItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_existed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSlice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSliceFromItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSliceR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSliceFromItemR(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_rangeQuery(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multiPut(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalCount(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_removeAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TIBSDataServiceProcessor(::apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> iface) :
    iface_(iface) {
    processMap_["putItem"] = &TIBSDataServiceProcessor::process_putItem;
    processMap_["removeItem"] = &TIBSDataServiceProcessor::process_removeItem;
    processMap_["existed"] = &TIBSDataServiceProcessor::process_existed;
    processMap_["getItem"] = &TIBSDataServiceProcessor::process_getItem;
    processMap_["getSlice"] = &TIBSDataServiceProcessor::process_getSlice;
    processMap_["getSliceFromItem"] = &TIBSDataServiceProcessor::process_getSliceFromItem;
    processMap_["getSliceR"] = &TIBSDataServiceProcessor::process_getSliceR;
    processMap_["getSliceFromItemR"] = &TIBSDataServiceProcessor::process_getSliceFromItemR;
    processMap_["rangeQuery"] = &TIBSDataServiceProcessor::process_rangeQuery;
    processMap_["multiPut"] = &TIBSDataServiceProcessor::process_multiPut;
    processMap_["getTotalCount"] = &TIBSDataServiceProcessor::process_getTotalCount;
    processMap_["removeAll"] = &TIBSDataServiceProcessor::process_removeAll;
  }

  virtual ~TIBSDataServiceProcessor() {}
};

class TIBSDataServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TIBSDataServiceProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< TIBSDataServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< TIBSDataServiceIfFactory > handlerFactory_;
};

class TIBSDataServiceMultiface : virtual public TIBSDataServiceIf {
 public:
  TIBSDataServiceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TIBSDataServiceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> > ifaces_;
  TIBSDataServiceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<TIBSDataServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void putItem(TPutItemResult& _return, const TKey bigsetID, const TItem& item) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->putItem(_return, bigsetID, item);
    }
    ifaces_[i]->putItem(_return, bigsetID, item);
    return;
  }

  bool removeItem(const TKey bigsetID, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeItem(bigsetID, itemKey);
    }
    return ifaces_[i]->removeItem(bigsetID, itemKey);
  }

  void existed(TExistedResult& _return, const TKey bigsetID, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->existed(_return, bigsetID, itemKey);
    }
    ifaces_[i]->existed(_return, bigsetID, itemKey);
    return;
  }

  void getItem(TItemResult& _return, const TKey bigsetID, const TItemKey& itemKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getItem(_return, bigsetID, itemKey);
    }
    ifaces_[i]->getItem(_return, bigsetID, itemKey);
    return;
  }

  void getSlice(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSlice(_return, bigsetID, fromPos, count);
    }
    ifaces_[i]->getSlice(_return, bigsetID, fromPos, count);
    return;
  }

  void getSliceFromItem(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSliceFromItem(_return, bigsetID, fromKey, count);
    }
    ifaces_[i]->getSliceFromItem(_return, bigsetID, fromKey, count);
    return;
  }

  void getSliceR(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSliceR(_return, bigsetID, fromPos, count);
    }
    ifaces_[i]->getSliceR(_return, bigsetID, fromPos, count);
    return;
  }

  void getSliceFromItemR(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSliceFromItemR(_return, bigsetID, fromKey, count);
    }
    ifaces_[i]->getSliceFromItemR(_return, bigsetID, fromKey, count);
    return;
  }

  void rangeQuery(TItemSetResult& _return, const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->rangeQuery(_return, bigsetID, startKey, endKey);
    }
    ifaces_[i]->rangeQuery(_return, bigsetID, startKey, endKey);
    return;
  }

  void multiPut(TMultiPutItemResult& _return, const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multiPut(_return, bigsetID, setData, getAddedItems, getReplacedItems);
    }
    ifaces_[i]->multiPut(_return, bigsetID, setData, getAddedItems, getReplacedItems);
    return;
  }

  int64_t getTotalCount(const TKey bigsetID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalCount(bigsetID);
    }
    return ifaces_[i]->getTotalCount(bigsetID);
  }

  int64_t removeAll(const TKey bigsetID) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->removeAll(bigsetID);
    }
    return ifaces_[i]->removeAll(bigsetID);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TIBSDataServiceConcurrentClient : virtual public TIBSDataServiceIf {
 public:
  TIBSDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TIBSDataServiceConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void putItem(TPutItemResult& _return, const TKey bigsetID, const TItem& item);
  int32_t send_putItem(const TKey bigsetID, const TItem& item);
  void recv_putItem(TPutItemResult& _return, const int32_t seqid);
  bool removeItem(const TKey bigsetID, const TItemKey& itemKey);
  int32_t send_removeItem(const TKey bigsetID, const TItemKey& itemKey);
  bool recv_removeItem(const int32_t seqid);
  void existed(TExistedResult& _return, const TKey bigsetID, const TItemKey& itemKey);
  int32_t send_existed(const TKey bigsetID, const TItemKey& itemKey);
  void recv_existed(TExistedResult& _return, const int32_t seqid);
  void getItem(TItemResult& _return, const TKey bigsetID, const TItemKey& itemKey);
  int32_t send_getItem(const TKey bigsetID, const TItemKey& itemKey);
  void recv_getItem(TItemResult& _return, const int32_t seqid);
  void getSlice(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count);
  int32_t send_getSlice(const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void recv_getSlice(TItemSetResult& _return, const int32_t seqid);
  void getSliceFromItem(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  int32_t send_getSliceFromItem(const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void recv_getSliceFromItem(TItemSetResult& _return, const int32_t seqid);
  void getSliceR(TItemSetResult& _return, const TKey bigsetID, const int32_t fromPos, const int32_t count);
  int32_t send_getSliceR(const TKey bigsetID, const int32_t fromPos, const int32_t count);
  void recv_getSliceR(TItemSetResult& _return, const int32_t seqid);
  void getSliceFromItemR(TItemSetResult& _return, const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  int32_t send_getSliceFromItemR(const TKey bigsetID, const TItemKey& fromKey, const int32_t count);
  void recv_getSliceFromItemR(TItemSetResult& _return, const int32_t seqid);
  void rangeQuery(TItemSetResult& _return, const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey);
  int32_t send_rangeQuery(const TKey bigsetID, const TItemKey& startKey, const TItemKey& endKey);
  void recv_rangeQuery(TItemSetResult& _return, const int32_t seqid);
  void multiPut(TMultiPutItemResult& _return, const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  int32_t send_multiPut(const TKey bigsetID, const TItemSet& setData, const bool getAddedItems, const bool getReplacedItems);
  void recv_multiPut(TMultiPutItemResult& _return, const int32_t seqid);
  int64_t getTotalCount(const TKey bigsetID);
  int32_t send_getTotalCount(const TKey bigsetID);
  int64_t recv_getTotalCount(const int32_t seqid);
  int64_t removeAll(const TKey bigsetID);
  int32_t send_removeAll(const TKey bigsetID);
  int64_t recv_removeAll(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
